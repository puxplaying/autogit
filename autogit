#!/bin/bash
#
# Description:
# Set the preferred package building config in the autogit.config file e.g. var=3
#
DIR=$HOME/autogit
#
# Check if local config exists
if [ -e "$DIR" ]
then
    #echo "local config found"
    echo
else
    mkdir -p $DIR
    cp -r /usr/share/autogit $HOME
    newconfig=1
fi
#
# Load Config
configdir=$DIR
. $configdir/autogit.conf
#. autogit.config
#
GITHUBMSG="\e[1mGithub repo updated - \e[7m$GITHUBBINARY\e[0m\e[0m"
GITHUBMSGCUST="\e[1mGithub repo updated - \e[7m$GITHUBBINARYCUSTOM\e[0m\e[0m"
GITLABMSG="\e[1mGitlab repo updated - \e[7m$GITLABBINARY\e[0m\e[0m\e[0m"
GITLABMSGCUST="\e[1mGitlab repo updated - \e[7m$GITLABBINARYCUSTOM\e[0m\e[0m\e[0m"
GITLABMSGCUST2="\e[1mGitlab repo updated - \e[7m$GITLABBINARYCUSTOM2\e[0m\e[0m\e[0m"
GITLABMSGCUST3="\e[1mGitlab repo updated - \e[7m$GITLABBINARYCUSTOM3\e[0m\e[0m\e[0m"
GITLABMSGCUST4="\e[1mGitlab repo updated - \e[7m$GITLABBINARYCUSTOM4\e[0m\e[0m\e[0m"
GITLABMSGCUST5="\e[1mGitlab repo updated - \e[7m$GITLABBINARYCUSTOM5\e[0m\e[0m\e[0m"
#
# Check if server is online
function servercheck() {
    if [ -z ${Server1+x} ]; then
        #echo "var is unset"
        echo
    else
        if ping -c$count -W1 $Server1 &>/dev/null; then
            #echo "$Server1 is up!"
            echo
        else
            echo "$Server1 is down ..exit!"
            exit
        fi
    fi
    
    if [ -z ${Server2+x} ]; then
        #echo "var is unset"
        echo
    else
        if ping -c$count -W1 $Server2 &>/dev/null; then
            #echo "$Server2 is up!"
            echo
        else
            echo "$Server2 is down ..exit!"
            exit
        fi
    fi
    
    if [ -z ${Server3+x} ]; then
        #echo "var is unset"
        echo
    else
        if ping -c$count -W1 $Server3 &>/dev/null; then
            #echo "$Server3 is up!"
            echo
        else
            echo "$Server3 is down ..exit!"
            exit
        fi
    fi
}
#
#
# Update, install, build packages from Github repos with available PKGBUILD
function githubversion() {
    while IFS="" read -r p || [ -n "$p" ]; do
        echo ""
        cd "$DIR"
        printf '%s\n' "$p" # Print package list entry
        GITHUBCLONEURL=$GITHUBCLONEURLC
        GITHUBURL="$GITHUBURLC"$p"/"$BRANCH"/PKGBUILD"
        GETPKGVER=$(curl --silent "$GITHUBURL" | grep 'pkgver=' | cut -c 8-)
        GETPKGREL=$(curl --silent "$GITHUBURL" | grep 'pkgrel=' | cut -c 8-)
        #echo "$GETPKGVER"  # Get online "pkgver" from PKGBUILD
        if [ -e "$DIR/packages/$p" ]; then # If file exists
            echo "file does exist local"
            cd "$DIR/packages/$p" # go to current package directory to compare it
            ls
            #url=$(curl --silent "https://raw.githubusercontent.com/"$p"/master/PKGBUILD" | grep 'pkgver=' | cut -c 8-)
            localfile=$(cat $(pwd)/PKGBUILD | grep 'pkgver=' | cut -c 8-)
            localfilepkgrel=$(cat $(pwd)/PKGBUILD | grep 'pkgrel=' | cut -c 8-)
            if [ "$GETPKGVER" == "$localfile" ] && [ "$GETPKGREL" == "$localfilepkgrel" ]; then
                echo -e "\e[7mUp to date!\e[0m"
            else
                echo -e "\e[7mOut of date! Updating ...\e[0m"
                git fetch origin
                git checkout master
                git reset --hard origin/master # reset files to how they were before
                git clean -f -d                # clear any other changes you've done
                if [ "$var" == "1" ]; then
                    ls
                    folder="$(printf '%q\n' "${PWD##*/}")"
                    cd ..
                    if buildpkg -c -p $folder; then
                        mv /var/cache/manjaro-tools/pkg/stable/x86_64/*.*.tar.* "$DIR/$GITHUBBINARY"
                        find "$DIR/$GITHUBBINARY" -type d -exec paccache -v -r -k 1 -c {} \; # clean cache
                    else
                        echo "Package did not build, removing ..."
                        rm -rf $folder/PKGBUILD
                    fi
                else
                    if [ "$var" == "0" ]; then
                        if time makepkg $MARG1 $MARG2 $MARG3 $MARG4 $MARG5 $MARG6; then
                            mv *.*.tar.* "$DIR/$GITHUBBINARY"
                            find "$DIR/$GITHUBBINARY" -type d -exec paccache -v -r -k 1 -c {} \; # clean cache
                        else
                            echo "Package did not build, removing ..."
                            rm -rf PKGBUILD
                        fi
                    else
                        if [ "$var" == "2" ]; then
                            if time makepkg -srci; then
                                mv *.*.tar.* "$DIR/$GITHUBBINARY"
                                find "$DIR/$GITHUBBINARY" -type d -exec paccache -v -r -k 1 -c {} \; # clean cache
                            else
                                echo "Package did not build, removing ..."
                                rm -rf PKGBUILD
                            fi
                        else
                            if [ "$var" == "3" ]; then
                                ls
                                folder="$(printf '%q\n' "${PWD##*/}")"
                                cd ..
                                if buildpkg $ARG1 $ARG2 $ARG3 $ARG4 $ARG5 $ARG6 $folder; then
                                    mv /var/cache/manjaro-tools/pkg/$ARG2/$ARG5/*.*.tar.* "$DIR/$GITHUBBINARY"
                                    find "$DIR/$GITHUBBINARY" -type d -exec paccache -v -r -k 1 -c {} \; # clean cache
                                else
                                    echo "Package did not build, removing ..."
                                    rm -rf $folder/PKGBUILD
                                fi
                            fi
                        fi
                    fi
                fi
            fi
        else
            echo "file does not exist local, downloading ..."
            mkdir -p "$DIR/packages/$p" && cd "$DIR/packages/$p"
            git clone "$GITHUBCLONEURL""$p".git
            folder="$(ls)"
            echo "$folder"
            mv $folder original
            cd original
            ls
            mv * .* "$DIR/packages/$p"
            cd "$DIR/packages/$p"
            rm -rf original
            mkdir -p "$DIR/$GITHUBBINARY"
            if [ "$var" == "1" ]; then
                updpkgsums
                if cd .. && buildpkg -c -p $folder; then
                    mv /var/cache/manjaro-tools/pkg/stable/x86_64/*.*.tar.* "$DIR/$GITHUBBINARY"
                else
                    echo "Package did not build, removing ..."
                    rm -rf $folder/PKGBUILD
                fi
            else
                if [ "$var" == "0" ]; then
                    updpkgsums
                    if time makepkg $MARG1 $MARG2 $MARG3 $MARG4 $MARG5 $MARG6; then
                        mv *.*.tar.* "$DIR/$GITHUBBINARY"
                    else
                        echo "Package did not build, removing ..."
                        rm -rf PKGBUILD
                    fi
                else
                    if [ "$var" == "2" ]; then
                        updpkgsums
                        if time makepkg -srci; then
                            mv *.*.tar.* "$DIR/$GITHUBBINARY"
                        else
                            echo "Package did not build, removing ..."
                            rm -rf PKGBUILD
                        fi
                    else
                        if [ "$var" == "3" ]; then
                            updpkgsums
                            if cd .. && buildpkg $ARG1 $ARG2 $ARG3 $ARG4 $ARG5 $ARG6 $folder; then
                                mv /var/cache/manjaro-tools/pkg/$ARG2/$ARG5/*.*.tar.* "$DIR/$GITHUBBINARY"
                            else
                                echo "Package did not build, removing ..."
                                rm -rf $folder/PKGBUILD
                            fi
                        fi
                    fi
                fi
            fi
        fi
    done <$GITHUBSOURCE #< $GITHUBSOURCE1
}
#
# Additional Custom Github repo
# Update, install, build packages from Github repos with available PKGBUILD
function githubversioncustom() {
    while IFS="" read -r p || [ -n "$p" ]; do
        echo ""
        cd "$DIR"
        printf '%s\n' "$p" # Print package list entry
        BRANCH=$BRANCHCUSTOM
        GITHUBCLONEURL=$GITHUBCLONEURLCCUSTOM
        GITHUBURL="$GITHUBURLCCUSTOM"$p"/"$BRANCH"/PKGBUILD"
        GETPKGVER=$(curl --silent "$GITHUBURL" | grep 'pkgver=' | cut -c 8-)
        GETPKGREL=$(curl --silent "$GITHUBURL" | grep 'pkgrel=' | cut -c 8-)
        #echo "$GETPKGVER"  # Get online "pkgver" from PKGBUILD
        if [ -e "$DIR/packages/$p" ]; then # If file exists
            echo "file does exist local"
            cd "$DIR/packages/$p" # go to current package directory to compare it
            ls
            #url=$(curl --silent "https://raw.githubusercontent.com/"$p"/master/PKGBUILD" | grep 'pkgver=' | cut -c 8-)
            localfile=$(cat $(pwd)/PKGBUILD | grep 'pkgver=' | cut -c 8-)
            localfilepkgrel=$(cat $(pwd)/PKGBUILD | grep 'pkgrel=' | cut -c 8-)
            if [ "$GETPKGVER" == "$localfile" ] && [ "$GETPKGREL" == "$localfilepkgrel" ]; then
                echo -e "\e[7mUp to date!\e[0m"
            else
                echo -e "\e[7mOut of date! Updating ...\e[0m"
                git fetch origin
                git checkout master
                git reset --hard origin/master # reset files to how they were before
                git clean -f -d                # clear any other changes you've done
                if [ "$var" == "1" ]; then
                    ls
                    folder="$(printf '%q\n' "${PWD##*/}")"
                    cd ..
                    if buildpkg -c -p $folder; then
                        mv /var/cache/manjaro-tools/pkg/stable/x86_64/*.*.tar.* "$DIR/$GITHUBBINARYCUSTOM"
                        find "$DIR/$GITHUBBINARYCUSTOM" -type d -exec paccache -v -r -k 1 -c {} \; # clean cache
                    else
                        echo "Package did not build, removing ..."
                        rm -rf $folder/PKGBUILD
                    fi
                else
                    if [ "$var" == "0" ]; then
                        if time makepkg $MARG1 $MARG2 $MARG3 $MARG4 $MARG5 $MARG6; then
                            mv *.*.tar.* "$DIR/$GITHUBBINARYCUSTOM"
                            find "$DIR/$GITHUBBINARYCUSTOM" -type d -exec paccache -v -r -k 1 -c {} \; # clean cache
                        else
                            echo "Package did not build, removing ..."
                            rm -rf PKGBUILD
                        fi
                    else
                        if [ "$var" == "2" ]; then
                            if time makepkg -srci; then
                                mv *.*.tar.* "$DIR/$GITHUBBINARYCUSTOM"
                                find "$DIR/$GITHUBBINARYCUSTOM" -type d -exec paccache -v -r -k 1 -c {} \; # clean cache
                            else
                                echo "Package did not build, removing ..."
                                rm -rf PKGBUILD
                            fi
                        else
                            if [ "$var" == "3" ]; then
                                ls
                                folder="$(printf '%q\n' "${PWD##*/}")"
                                cd ..
                                if buildpkg $ARG1 $ARG2 $ARG3 $ARG4 $ARG5 $ARG6 $folder; then
                                    mv /var/cache/manjaro-tools/pkg/$ARG2/$ARG5/*.*.tar.* "$DIR/$GITHUBBINARYCUSTOM"
                                    find "$DIR/$GITHUBBINARYCUSTOM" -type d -exec paccache -v -r -k 1 -c {} \; # clean cache
                                else
                                    echo "Package did not build, removing ..."
                                    rm -rf $folder/PKGBUILD
                                fi
                            fi
                        fi
                    fi
                fi
            fi
        else
            echo "file does not exist local, downloading ..."
            mkdir -p "$DIR/packages/$p" && cd "$DIR/packages/$p"
            git clone "$GITHUBCLONEURL""$p".git
            folder="$(ls)"
            echo "$folder"
            mv $folder original
            cd original
            ls
            mv * .* "$DIR/packages/$p"
            cd "$DIR/packages/$p"
            rm -rf original
            mkdir -p "$DIR/$GITHUBBINARYCUSTOM"
            if [ "$var" == "1" ]; then
                updpkgsums
                if cd .. && buildpkg -c -p $folder; then
                    mv /var/cache/manjaro-tools/pkg/stable/x86_64/*.*.tar.* "$DIR/$GITHUBBINARYCUSTOM"
                else
                    echo "Package did not build, removing ..."
                    rm -rf $folder/PKGBUILD
                fi
            else
                if [ "$var" == "0" ]; then
                    updpkgsums
                    if time makepkg $MARG1 $MARG2 $MARG3 $MARG4 $MARG5 $MARG6; then
                        mv *.*.tar.* "$DIR/$GITHUBBINARYCUSTOM"
                    else
                        echo "Package did not build, removing ..."
                        rm -rf PKGBUILD
                    fi
                else
                    if [ "$var" == "2" ]; then
                        updpkgsums
                        if time makepkg -srci; then
                            mv *.*.tar.* "$DIR/$GITHUBBINARYCUSTOM"
                        else
                            echo "Package did not build, removing ..."
                            rm -rf PKGBUILD
                        fi
                    else
                        if [ "$var" == "3" ]; then
                            updpkgsums
                            if cd .. && buildpkg $ARG1 $ARG2 $ARG3 $ARG4 $ARG5 $ARG6 $folder; then
                                mv /var/cache/manjaro-tools/pkg/$ARG2/$ARG5/*.*.tar.* "$DIR/$GITHUBBINARYCUSTOM"
                            else
                                echo "Package did not build, removing ..."
                                rm -rf $folder/PKGBUILD
                            fi
                        fi
                    fi
                fi
            fi
        fi
    done <$GITHUBSOURCECUSTOM #< $GITHUBSOURCE1
}
#
#
# Additional Gitlab repo
# Update, install, build packages from Gitlab repos with available PKGBUILD
function gitlabversion() {
    while IFS="" read -r p || [ -n "$p" ]; do
        echo ""
        cd "$DIR"
        printf '%s\n' "$p" # Print package list entry
        BRANCH=$BRANCHGITLAB
        GITHUBCLONEURL=$GITLABCLONEURL
        GITHUBURL="$GITLABURLC"$p"/-/raw/"$BRANCH"/PKGBUILD"
        GETPKGVER=$(curl --silent "$GITHUBURL" | grep 'pkgver=' | cut -c 8-)
        GETPKGREL=$(curl --silent "$GITHUBURL" | grep 'pkgrel=' | cut -c 8-)
        #echo "$GETPKGVER"  # Get online "pkgver" from PKGBUILD
        if [ -e "$DIR/packages/$p" ]; then # If file exists
            echo "file does exist local"
            cd "$DIR/packages/$p" # go to current package directory to compare it
            ls
            #url=$(curl --silent "https://raw.githubusercontent.com/"$p"/master/PKGBUILD" | grep 'pkgver=' | cut -c 8-)
            localfile=$(cat $(pwd)/PKGBUILD | grep 'pkgver=' | cut -c 8-)
            localfilepkgrel=$(cat $(pwd)/PKGBUILD | grep 'pkgrel=' | cut -c 8-)
            if [ "$GETPKGVER" == "$localfile" ] && [ "$GETPKGREL" == "$localfilepkgrel" ]; then
                echo -e "\e[7mUp to date!\e[0m"
            else
                echo -e "\e[7mOut of date! Updating ...\e[0m"
                git fetch origin
                git checkout master
                git reset --hard origin/master # reset files to how they were before
                git clean -f -d                # clear any other changes you've done
                if [ "$var" == "1" ]; then
                    ls
                    folder="$(printf '%q\n' "${PWD##*/}")"
                    cd ..
                    if buildpkg -c -p $folder; then
                        mv /var/cache/manjaro-tools/pkg/stable/x86_64/*.*.tar.* "$DIR/$GITLABBINARY"
                        find "$DIR/$GITLABBINARY" -type d -exec paccache -v -r -k 1 -c {} \; # clean cache
                    else
                        echo "Package did not build, removing ..."
                        rm -rf $folder/PKGBUILD
                    fi
                else
                    if [ "$var" == "0" ]; then
                        if time makepkg $MARG1 $MARG2 $MARG3 $MARG4 $MARG5 $MARG6; then
                            mv *.*.tar.* "$DIR/$GITLABBINARY"
                            find "$DIR/$GITLABBINARY" -type d -exec paccache -v -r -k 1 -c {} \; # clean cache
                        else
                            echo "Package did not build, removing ..."
                            rm -rf PKGBUILD
                        fi
                    else
                        if [ "$var" == "2" ]; then
                            if time makepkg -srci; then
                                mv *.*.tar.* "$DIR/$GITLABBINARY"
                                find "$DIR/$GITLABBINARY" -type d -exec paccache -v -r -k 1 -c {} \; # clean cache
                            else
                                echo "Package did not build, removing ..."
                                rm -rf PKGBUILD
                            fi
                        else
                            if [ "$var" == "3" ]; then
                                ls
                                folder="$(printf '%q\n' "${PWD##*/}")"
                                cd ..
                                if buildpkg $ARG1 $ARG2 $ARG3 $ARG4 $ARG5 $ARG6 $folder; then
                                    mv /var/cache/manjaro-tools/pkg/$ARG2/$ARG5/*.*.tar.* "$DIR/$GITLABBINARY"
                                    find "$DIR/$GITLABBINARY" -type d -exec paccache -v -r -k 1 -c {} \; # clean cache
                                else
                                    echo "Package did not build, removing ..."
                                    rm -rf $folder/PKGBUILD
                                fi
                            fi
                        fi
                    fi
                fi
            fi
        else
            echo "file does not exist local, downloading ..."
            mkdir -p "$DIR/packages/$p" && cd "$DIR/packages/$p"
            git clone "$GITHUBCLONEURL""$p".git
            folder="$(ls)"
            echo "$folder"
            mv $folder original
            cd original
            ls
            mv * .* "$DIR/packages/$p"
            cd "$DIR/packages/$p"
            rm -rf original
            mkdir -p "$DIR/$GITLABBINARY"
            if [ "$var" == "1" ]; then
                updpkgsums
                if cd .. && buildpkg -c -p $folder; then
                    mv /var/cache/manjaro-tools/pkg/stable/x86_64/*.*.tar.* "$DIR/$GITLABBINARY"
                else
                    echo "Package did not build, removing ..."
                    rm -rf $folder/PKGBUILD
                fi
            else
                if [ "$var" == "0" ]; then
                    updpkgsums
                    if time makepkg $MARG1 $MARG2 $MARG3 $MARG4 $MARG5 $MARG6; then
                        mv *.*.tar.* "$DIR/$GITLABBINARY"
                    else
                        echo "Package did not build, removing ..."
                        rm -rf PKGBUILD
                    fi
                else
                    if [ "$var" == "2" ]; then
                        updpkgsums
                        if time makepkg -srci; then
                            mv *.*.tar.* "$DIR/$GITLABBINARY"
                        else
                            echo "Package did not build, removing ..."
                            rm -rf PKGBUILD
                        fi
                    else
                        if [ "$var" == "3" ]; then
                            updpkgsums
                            if cd .. && buildpkg $ARG1 $ARG2 $ARG3 $ARG4 $ARG5 $ARG6 $folder; then
                                mv /var/cache/manjaro-tools/pkg/$ARG2/$ARG5/*.*.tar.* "$DIR/$GITLABBINARY"
                            else
                                echo "Package did not build, removing ..."
                                rm -rf $folder/PKGBUILD
                            fi
                        fi
                    fi
                fi
            fi
        fi
    done <$GITLABSOURCE #< $GITHUBSOURCE1
}
#
# Additional Custom Gitlab repo
# Update, install, build packages from Gitlab repos with available PKGBUILD
function gitlabversioncustom() {
    while IFS="" read -r p || [ -n "$p" ]; do
        echo ""
        cd "$DIR"
        printf '%s\n' "$p" # Print package list entry
        BRANCH=$BRANCHGITLABCUSTOM
        GITHUBCLONEURL=$GITLABCLONEURLCUSTOM
        GITHUBURL="$GITLABURLCCUSTOM"$p"/-/raw/"$BRANCH"/PKGBUILD"
        GETPKGVER=$(curl --silent "$GITHUBURL" | grep 'pkgver=' | cut -c 8-)
        GETPKGREL=$(curl --silent "$GITHUBURL" | grep 'pkgrel=' | cut -c 8-)
        #echo "$GETPKGVER"  # Get online "pkgver" from PKGBUILD
        if [ -e "$DIR/packages/$p" ]; then # If file exists
            echo "file does exist local"
            cd "$DIR/packages/$p" # go to current package directory to compare it
            ls
            #url=$(curl --silent "https://raw.githubusercontent.com/"$p"/master/PKGBUILD" | grep 'pkgver=' | cut -c 8-)
            localfile=$(cat $(pwd)/PKGBUILD | grep 'pkgver=' | cut -c 8-)
            localfilepkgrel=$(cat $(pwd)/PKGBUILD | grep 'pkgrel=' | cut -c 8-)
            if [ "$GETPKGVER" == "$localfile" ] && [ "$GETPKGREL" == "$localfilepkgrel" ]; then
                echo -e "\e[7mUp to date!\e[0m"
            else
                echo -e "\e[7mOut of date! Updating ...\e[0m"
                git fetch origin
                git checkout master
                git reset --hard origin/master # reset files to how they were before
                git clean -f -d                # clear any other changes you've done
                if [ "$var" == "1" ]; then
                    ls
                    folder="$(printf '%q\n' "${PWD##*/}")"
                    cd ..
                    if buildpkg -c -p $folder; then
                        mv /var/cache/manjaro-tools/pkg/stable/x86_64/*.*.tar.* "$DIR/$GITLABBINARYCUSTOM"
                        find "$DIR/$GITLABBINARYCUSTOM" -type d -exec paccache -v -r -k 1 -c {} \; # clean cache
                    else
                        echo "Package did not build, removing ..."
                        rm -rf $folder/PKGBUILD
                    fi
                else
                    if [ "$var" == "0" ]; then
                        if time makepkg $MARG1 $MARG2 $MARG3 $MARG4 $MARG5 $MARG6; then
                            mv *.*.tar.* "$DIR/$GITLABBINARYCUSTOM"
                            find "$DIR/$GITLABBINARYCUSTOM" -type d -exec paccache -v -r -k 1 -c {} \; # clean cache
                        else
                            echo "Package did not build, removing ..."
                            rm -rf PKGBUILD
                        fi
                    else
                        if [ "$var" == "2" ]; then
                            if time makepkg -srci; then
                                mv *.*.tar.* "$DIR/$GITLABBINARYCUSTOM"
                                find "$DIR/$GITLABBINARYCUSTOM" -type d -exec paccache -v -r -k 1 -c {} \; # clean cache
                            else
                                echo "Package did not build, removing ..."
                                rm -rf PKGBUILD
                            fi
                        else
                            if [ "$var" == "3" ]; then
                                ls
                                folder="$(printf '%q\n' "${PWD##*/}")"
                                cd ..
                                if buildpkg $ARG1 $ARG2 $ARG3 $ARG4 $ARG5 $ARG6 $folder; then
                                    mv /var/cache/manjaro-tools/pkg/$ARG2/$ARG5/*.*.tar.* "$DIR/$GITLABBINARYCUSTOM"
                                    find "$DIR/$GITLABBINARYCUSTOM" -type d -exec paccache -v -r -k 1 -c {} \; # clean cache
                                else
                                    echo "Package did not build, removing ..."
                                    rm -rf $folder/PKGBUILD
                                fi
                            fi
                        fi
                    fi
                fi
            fi
        else
            echo "file does not exist local, downloading ..."
            mkdir -p "$DIR/packages/$p" && cd "$DIR/packages/$p"
            git clone "$GITHUBCLONEURL""$p".git
            folder="$(ls)"
            echo "$folder"
            mv $folder original
            cd original
            ls
            mv * .* "$DIR/packages/$p"
            cd "$DIR/packages/$p"
            rm -rf original
            mkdir -p "$DIR/$GITLABBINARYCUSTOM"
            if [ "$var" == "1" ]; then
                updpkgsums
                if cd .. && buildpkg -c -p $folder; then
                    mv /var/cache/manjaro-tools/pkg/stable/x86_64/*.*.tar.* "$DIR/$GITLABBINARYCUSTOM"
                else
                    echo "Package did not build, removing ..."
                    rm -rf $folder/PKGBUILD
                fi
            else
                if [ "$var" == "0" ]; then
                    updpkgsums
                    if time makepkg $MARG1 $MARG2 $MARG3 $MARG4 $MARG5 $MARG6; then
                        mv *.*.tar.* "$DIR/$GITLABBINARYCUSTOM"
                    else
                        echo "Package did not build, removing ..."
                        rm -rf PKGBUILD
                    fi
                else
                    if [ "$var" == "2" ]; then
                        updpkgsums
                        if time makepkg -srci; then
                            mv *.*.tar.* "$DIR/$GITLABBINARYCUSTOM"
                        else
                            echo "Package did not build, removing ..."
                            rm -rf PKGBUILD
                        fi
                    else
                        if [ "$var" == "3" ]; then
                            updpkgsums
                            if cd .. && buildpkg $ARG1 $ARG2 $ARG3 $ARG4 $ARG5 $ARG6 $folder; then
                                mv /var/cache/manjaro-tools/pkg/$ARG2/$ARG5/*.*.tar.* "$DIR/$GITLABBINARYCUSTOM"
                            else
                                echo "Package did not build, removing ..."
                                rm -rf $folder/PKGBUILD
                            fi
                        fi
                    fi
                fi
            fi
        fi
    done <$GITLABSOURCECUSTOM #< $GITHUBSOURCE1
}
#
# Additional Custom Gitlab repo extra 2
# Update, install, build packages from Gitlab repos with available PKGBUILD
function gitlabversioncustom2() {
    while IFS="" read -r p || [ -n "$p" ]; do
        echo ""
        cd "$DIR"
        printf '%s\n' "$p" # Print package list entry
        BRANCH=$BRANCHGITLABCUSTOM2
        GITHUBCLONEURL=$GITLABCLONEURLCUSTOM2
        GITHUBURL="$GITLABURLCCUSTOM2"$p"/-/raw/"$BRANCH"/PKGBUILD"
        GETPKGVER=$(curl --silent "$GITHUBURL" | grep 'pkgver=' | cut -c 8-)
        GETPKGREL=$(curl --silent "$GITHUBURL" | grep 'pkgrel=' | cut -c 8-)
        #echo "$GETPKGVER"  # Get online "pkgver" from PKGBUILD
        if [ -e "$DIR/packages/$p" ]; then # If file exists
            echo "file does exist local"
            cd "$DIR/packages/$p" # go to current package directory to compare it
            ls
            #url=$(curl --silent "https://raw.githubusercontent.com/"$p"/master/PKGBUILD" | grep 'pkgver=' | cut -c 8-)
            localfile=$(cat $(pwd)/PKGBUILD | grep 'pkgver=' | cut -c 8-)
            localfilepkgrel=$(cat $(pwd)/PKGBUILD | grep 'pkgrel=' | cut -c 8-)
            if [ "$GETPKGVER" == "$localfile" ] && [ "$GETPKGREL" == "$localfilepkgrel" ]; then
                echo -e "\e[7mUp to date!\e[0m"
            else
                echo -e "\e[7mOut of date! Updating ...\e[0m"
                git fetch origin
                git checkout master
                git reset --hard origin/master # reset files to how they were before
                git clean -f -d                # clear any other changes you've done
                if [ "$var" == "1" ]; then
                    ls
                    folder="$(printf '%q\n' "${PWD##*/}")"
                    cd ..
                    if buildpkg -c -p $folder; then
                        mv /var/cache/manjaro-tools/pkg/stable/x86_64/*.*.tar.* "$DIR/$GITLABBINARYCUSTOM2"
                        find "$DIR/$GITLABBINARYCUSTOM2" -type d -exec paccache -v -r -k 1 -c {} \; # clean cache
                    else
                        echo "Package did not build, removing ..."
                        rm -rf $folder/PKGBUILD
                    fi
                else
                    if [ "$var" == "0" ]; then
                        if time makepkg $MARG1 $MARG2 $MARG3 $MARG4 $MARG5 $MARG6; then
                            mv *.*.tar.* "$DIR/$GITLABBINARYCUSTOM2"
                            find "$DIR/$GITLABBINARYCUSTOM2" -type d -exec paccache -v -r -k 1 -c {} \; # clean cache
                        else
                            echo "Package did not build, removing ..."
                            rm -rf PKGBUILD
                        fi
                    else
                        if [ "$var" == "2" ]; then
                            if time makepkg -srci; then
                                mv *.*.tar.* "$DIR/$GITLABBINARYCUSTOM2"
                                find "$DIR/$GITLABBINARYCUSTOM2" -type d -exec paccache -v -r -k 1 -c {} \; # clean cache
                            else
                                echo "Package did not build, removing ..."
                                rm -rf PKGBUILD
                            fi
                        else
                            if [ "$var" == "3" ]; then
                                ls
                                folder="$(printf '%q\n' "${PWD##*/}")"
                                cd ..
                                if buildpkg $ARG1 $ARG2 $ARG3 $ARG4 $ARG5 $ARG6 $folder; then
                                    mv /var/cache/manjaro-tools/pkg/$ARG2/$ARG5/*.*.tar.* "$DIR/$GITLABBINARYCUSTOM2"
                                    find "$DIR/$GITLABBINARYCUSTOM2" -type d -exec paccache -v -r -k 1 -c {} \; # clean cache
                                else
                                    echo "Package did not build, removing ..."
                                    rm -rf $folder/PKGBUILD
                                fi
                            fi
                        fi
                    fi
                fi
            fi
        else
            echo "file does not exist local, downloading ..."
            mkdir -p "$DIR/packages/$p" && cd "$DIR/packages/$p"
            git clone "$GITHUBCLONEURL""$p".git
            folder="$(ls)"
            echo "$folder"
            mv $folder original
            cd original
            ls
            mv * .* "$DIR/packages/$p"
            cd "$DIR/packages/$p"
            rm -rf original
            mkdir -p "$DIR/$GITLABBINARYCUSTOM2"
            if [ "$var" == "1" ]; then
                updpkgsums
                if cd .. && buildpkg -c -p $folder; then
                    mv /var/cache/manjaro-tools/pkg/stable/x86_64/*.*.tar.* "$DIR/$GITLABBINARYCUSTOM2"
                else
                    echo "Package did not build, removing ..."
                    rm -rf $folder/PKGBUILD
                fi
            else
                if [ "$var" == "0" ]; then
                    updpkgsums
                    if time makepkg $MARG1 $MARG2 $MARG3 $MARG4 $MARG5 $MARG6; then
                        mv *.*.tar.* "$DIR/$GITLABBINARYCUSTOM2"
                    else
                        echo "Package did not build, removing ..."
                        rm -rf PKGBUILD
                    fi
                else
                    if [ "$var" == "2" ]; then
                        updpkgsums
                        if time makepkg -srci; then
                            mv *.*.tar.* "$DIR/$GITLABBINARYCUSTOM2"
                        else
                            echo "Package did not build, removing ..."
                            rm -rf PKGBUILD
                        fi
                    else
                        if [ "$var" == "3" ]; then
                            updpkgsums
                            if cd .. && buildpkg $ARG1 $ARG2 $ARG3 $ARG4 $ARG5 $ARG6 $folder; then
                                mv /var/cache/manjaro-tools/pkg/$ARG2/$ARG5/*.*.tar.* "$DIR/$GITLABBINARYCUSTOM2"
                            else
                                echo "Package did not build, removing ..."
                                rm -rf $folder/PKGBUILD
                            fi
                        fi
                    fi
                fi
            fi
        fi
    done <$GITLABSOURCECUSTOM2 #< $GITHUBSOURCE1
}
#
# Additional Custom Gitlab repo extra 3
# Update, install, build packages from Gitlab repos with available PKGBUILD
function gitlabversioncustom3() {
    while IFS="" read -r p || [ -n "$p" ]; do
        echo ""
        cd "$DIR"
        printf '%s\n' "$p" # Print package list entry
        BRANCH=$BRANCHGITLABCUSTOM3
        GITHUBCLONEURL=$GITLABCLONEURLCUSTOM3
        GITHUBURL="$GITLABURLCCUSTOM3"$p"/-/raw/"$BRANCH"/PKGBUILD"
        GETPKGVER=$(curl --silent "$GITHUBURL" | grep 'pkgver=' | cut -c 8-)
        GETPKGREL=$(curl --silent "$GITHUBURL" | grep 'pkgrel=' | cut -c 8-)
        #echo "$GETPKGVER"  # Get online "pkgver" from PKGBUILD
        if [ -e "$DIR/packages/$p" ]; then # If file exists
            echo "file does exist local"
            cd "$DIR/packages/$p" # go to current package directory to compare it
            ls
            #url=$(curl --silent "https://raw.githubusercontent.com/"$p"/master/PKGBUILD" | grep 'pkgver=' | cut -c 8-)
            localfile=$(cat $(pwd)/PKGBUILD | grep 'pkgver=' | cut -c 8-)
            localfilepkgrel=$(cat $(pwd)/PKGBUILD | grep 'pkgrel=' | cut -c 8-)
            if [ "$GETPKGVER" == "$localfile" ] && [ "$GETPKGREL" == "$localfilepkgrel" ]; then
                echo -e "\e[7mUp to date!\e[0m"
            else
                echo -e "\e[7mOut of date! Updating ...\e[0m"
                git fetch origin
                git checkout master
                git reset --hard origin/master # reset files to how they were before
                git clean -f -d                # clear any other changes you've done
                if [ "$var" == "1" ]; then
                    ls
                    folder="$(printf '%q\n' "${PWD##*/}")"
                    cd ..
                    if buildpkg -c -p $folder; then
                        mv /var/cache/manjaro-tools/pkg/stable/x86_64/*.*.tar.* "$DIR/$GITLABBINARYCUSTOM3"
                        find "$DIR/$GITLABBINARYCUSTOM3" -type d -exec paccache -v -r -k 1 -c {} \; # clean cache
                    else
                        echo "Package did not build, removing ..."
                        rm -rf $folder/PKGBUILD
                    fi
                else
                    if [ "$var" == "0" ]; then
                        if time makepkg $MARG1 $MARG2 $MARG3 $MARG4 $MARG5 $MARG6; then
                            mv *.*.tar.* "$DIR/$GITLABBINARYCUSTOM3"
                            find "$DIR/$GITLABBINARYCUSTOM3" -type d -exec paccache -v -r -k 1 -c {} \; # clean cache
                        else
                            echo "Package did not build, removing ..."
                            rm -rf PKGBUILD
                        fi
                    else
                        if [ "$var" == "2" ]; then
                            if time makepkg -srci; then
                                mv *.*.tar.* "$DIR/$GITLABBINARYCUSTOM3"
                                find "$DIR/$GITLABBINARYCUSTOM3" -type d -exec paccache -v -r -k 1 -c {} \; # clean cache
                            else
                                echo "Package did not build, removing ..."
                                rm -rf PKGBUILD
                            fi
                        else
                            if [ "$var" == "3" ]; then
                                ls
                                folder="$(printf '%q\n' "${PWD##*/}")"
                                cd ..
                                if buildpkg $ARG1 $ARG2 $ARG3 $ARG4 $ARG5 $ARG6 $folder; then
                                    mv /var/cache/manjaro-tools/pkg/$ARG2/$ARG5/*.*.tar.* "$DIR/$GITLABBINARYCUSTOM3"
                                    find "$DIR/$GITLABBINARYCUSTOM3" -type d -exec paccache -v -r -k 1 -c {} \; # clean cache
                                else
                                    echo "Package did not build, removing ..."
                                    rm -rf $folder/PKGBUILD
                                fi
                            fi
                        fi
                    fi
                fi
            fi
        else
            echo "file does not exist local, downloading ..."
            mkdir -p "$DIR/packages/$p" && cd "$DIR/packages/$p"
            git clone "$GITHUBCLONEURL""$p".git
            folder="$(ls)"
            echo "$folder"
            mv $folder original
            cd original
            ls
            mv * .* "$DIR/packages/$p"
            cd "$DIR/packages/$p"
            rm -rf original
            mkdir -p "$DIR/$GITLABBINARYCUSTOM3"
            if [ "$var" == "1" ]; then
                updpkgsums
                if cd .. && buildpkg -c -p $folder; then
                    mv /var/cache/manjaro-tools/pkg/stable/x86_64/*.*.tar.* "$DIR/$GITLABBINARYCUSTOM3"
                else
                    echo "Package did not build, removing ..."
                    rm -rf $folder/PKGBUILD
                fi
            else
                if [ "$var" == "0" ]; then
                    updpkgsums
                    if time makepkg $MARG1 $MARG2 $MARG3 $MARG4 $MARG5 $MARG6; then
                        mv *.*.tar.* "$DIR/$GITLABBINARYCUSTOM3"
                    else
                        echo "Package did not build, removing ..."
                        rm -rf PKGBUILD
                    fi
                else
                    if [ "$var" == "2" ]; then
                        updpkgsums
                        if time makepkg -srci; then
                            mv *.*.tar.* "$DIR/$GITLABBINARYCUSTOM3"
                        else
                            echo "Package did not build, removing ..."
                            rm -rf PKGBUILD
                        fi
                    else
                        if [ "$var" == "3" ]; then
                            updpkgsums
                            if cd .. && buildpkg $ARG1 $ARG2 $ARG3 $ARG4 $ARG5 $ARG6 $folder; then
                                mv /var/cache/manjaro-tools/pkg/$ARG2/$ARG5/*.*.tar.* "$DIR/$GITLABBINARYCUSTOM3"
                            else
                                echo "Package did not build, removing ..."
                                rm -rf $folder/PKGBUILD
                            fi
                        fi
                    fi
                fi
            fi
        fi
    done <$GITLABSOURCECUSTOM3 #< $GITHUBSOURCE1
}
#
#
# Additional Custom Gitlab repo extra 3
# Update, install, build packages from Gitlab repos with available PKGBUILD
function gitlabversioncustom4() {
    while IFS="" read -r p || [ -n "$p" ]; do
        echo ""
        cd "$DIR"
        printf '%s\n' "$p" # Print package list entry
        BRANCH=$BRANCHGITLABCUSTOM4
        GITHUBCLONEURL=$GITLABCLONEURLCUSTOM4
        GITHUBURL="$GITLABURLCCUSTOM4"$p"/-/raw/"$BRANCH"/PKGBUILD"
        GETPKGVER=$(curl --silent "$GITHUBURL" | grep 'pkgver=' | cut -c 8-)
        GETPKGREL=$(curl --silent "$GITHUBURL" | grep 'pkgrel=' | cut -c 8-)
        #echo "$GETPKGVER"  # Get online "pkgver" from PKGBUILD
        if [ -e "$DIR/packages/$p" ]; then # If file exists
            echo "file does exist local"
            cd "$DIR/packages/$p" # go to current package directory to compare it
            ls
            #url=$(curl --silent "https://raw.githubusercontent.com/"$p"/master/PKGBUILD" | grep 'pkgver=' | cut -c 8-)
            localfile=$(cat $(pwd)/PKGBUILD | grep 'pkgver=' | cut -c 8-)
            localfilepkgrel=$(cat $(pwd)/PKGBUILD | grep 'pkgrel=' | cut -c 8-)
            if [ "$GETPKGVER" == "$localfile" ] && [ "$GETPKGREL" == "$localfilepkgrel" ]; then
                echo -e "\e[7mUp to date!\e[0m"
            else
                echo -e "\e[7mOut of date! Updating ...\e[0m"
                git fetch origin
                git checkout master
                git reset --hard origin/master # reset files to how they were before
                git clean -f -d                # clear any other changes you've done
                if [ "$var" == "1" ]; then
                    ls
                    folder="$(printf '%q\n' "${PWD##*/}")"
                    cd ..
                    if buildpkg -c -p $folder; then
                        mv /var/cache/manjaro-tools/pkg/stable/x86_64/*.*.tar.* "$DIR/$GITLABBINARYCUSTOM4"
                        find "$DIR/$GITLABBINARYCUSTOM4" -type d -exec paccache -v -r -k 1 -c {} \; # clean cache
                    else
                        echo "Package did not build, removing ..."
                        rm -rf $folder/PKGBUILD
                    fi
                else
                    if [ "$var" == "0" ]; then
                        if time makepkg $MARG1 $MARG2 $MARG3 $MARG4 $MARG5 $MARG6; then
                            mv *.*.tar.* "$DIR/$GITLABBINARYCUSTOM4"
                            find "$DIR/$GITLABBINARYCUSTOM4" -type d -exec paccache -v -r -k 1 -c {} \; # clean cache
                        else
                            echo "Package did not build, removing ..."
                            rm -rf PKGBUILD
                        fi
                    else
                        if [ "$var" == "2" ]; then
                            if time makepkg -srci; then
                                mv *.*.tar.* "$DIR/$GITLABBINARYCUSTOM4"
                                find "$DIR/$GITLABBINARYCUSTOM4" -type d -exec paccache -v -r -k 1 -c {} \; # clean cache
                            else
                                echo "Package did not build, removing ..."
                                rm -rf PKGBUILD
                            fi
                        else
                            if [ "$var" == "3" ]; then
                                ls
                                folder="$(printf '%q\n' "${PWD##*/}")"
                                cd ..
                                if buildpkg $ARG1 $ARG2 $ARG3 $ARG4 $ARG5 $ARG6 $folder; then
                                    mv /var/cache/manjaro-tools/pkg/$ARG2/$ARG5/*.*.tar.* "$DIR/$GITLABBINARYCUSTOM4"
                                    find "$DIR/$GITLABBINARYCUSTOM4" -type d -exec paccache -v -r -k 1 -c {} \; # clean cache
                                else
                                    echo "Package did not build, removing ..."
                                    rm -rf $folder/PKGBUILD
                                fi
                            fi
                        fi
                    fi
                fi
            fi
        else
            echo "file does not exist local, downloading ..."
            mkdir -p "$DIR/packages/$p" && cd "$DIR/packages/$p"
            git clone "$GITHUBCLONEURL""$p".git
            folder="$(ls)"
            echo "$folder"
            mv $folder original
            cd original
            ls
            mv * .* "$DIR/packages/$p"
            cd "$DIR/packages/$p"
            rm -rf original
            mkdir -p "$DIR/$GITLABBINARYCUSTOM4"
            if [ "$var" == "1" ]; then
                updpkgsums
                if cd .. && buildpkg -c -p $folder; then
                    mv /var/cache/manjaro-tools/pkg/stable/x86_64/*.*.tar.* "$DIR/$GITLABBINARYCUSTOM4"
                else
                    echo "Package did not build, removing ..."
                    rm -rf $folder/PKGBUILD
                fi
            else
                if [ "$var" == "0" ]; then
                    updpkgsums
                    if time makepkg $MARG1 $MARG2 $MARG3 $MARG4 $MARG5 $MARG6; then
                        mv *.*.tar.* "$DIR/$GITLABBINARYCUSTOM4"
                    else
                        echo "Package did not build, removing ..."
                        rm -rf PKGBUILD
                    fi
                else
                    if [ "$var" == "2" ]; then
                        updpkgsums
                        if time makepkg -srci; then
                            mv *.*.tar.* "$DIR/$GITLABBINARYCUSTOM4"
                        else
                            echo "Package did not build, removing ..."
                            rm -rf PKGBUILD
                        fi
                    else
                        if [ "$var" == "3" ]; then
                            updpkgsums
                            if cd .. && buildpkg $ARG1 $ARG2 $ARG3 $ARG4 $ARG5 $ARG6 $folder; then
                                mv /var/cache/manjaro-tools/pkg/$ARG2/$ARG5/*.*.tar.* "$DIR/$GITLABBINARYCUSTOM4"
                            else
                                echo "Package did not build, removing ..."
                                rm -rf $folder/PKGBUILD
                            fi
                        fi
                    fi
                fi
            fi
        fi
    done <$GITLABSOURCECUSTOM4 #< $GITHUBSOURCE1
}
#
#
# Additional Custom Gitlab repo extra 3
# Update, install, build packages from Gitlab repos with available PKGBUILD
function gitlabversioncustom5() {
    while IFS="" read -r p || [ -n "$p" ]; do
        echo ""
        cd "$DIR"
        printf '%s\n' "$p" # Print package list entry
        BRANCH=$BRANCHGITLABCUSTOM5
        GITHUBCLONEURL=$GITLABCLONEURLCUSTOM5
        GITHUBURL="$GITLABURLCCUSTOM5"$p"/-/raw/"$BRANCH"/PKGBUILD"
        GETPKGVER=$(curl --silent "$GITHUBURL" | grep 'pkgver=' | cut -c 8-)
        GETPKGREL=$(curl --silent "$GITHUBURL" | grep 'pkgrel=' | cut -c 8-)
        #echo "$GETPKGVER"  # Get online "pkgver" from PKGBUILD
        if [ -e "$DIR/packages/$p" ]; then # If file exists
            echo "file does exist local"
            cd "$DIR/packages/$p" # go to current package directory to compare it
            ls
            #url=$(curl --silent "https://raw.githubusercontent.com/"$p"/master/PKGBUILD" | grep 'pkgver=' | cut -c 8-)
            localfile=$(cat $(pwd)/PKGBUILD | grep 'pkgver=' | cut -c 8-)
            localfilepkgrel=$(cat $(pwd)/PKGBUILD | grep 'pkgrel=' | cut -c 8-)
            if [ "$GETPKGVER" == "$localfile" ] && [ "$GETPKGREL" == "$localfilepkgrel" ]; then
                echo -e "\e[7mUp to date!\e[0m"
            else
                echo -e "\e[7mOut of date! Updating ...\e[0m"
                git fetch origin
                git checkout master
                git reset --hard origin/master # reset files to how they were before
                git clean -f -d                # clear any other changes you've done
                if [ "$var" == "1" ]; then
                    ls
                    folder="$(printf '%q\n' "${PWD##*/}")"
                    cd ..
                    if buildpkg -c -p $folder; then
                        mv /var/cache/manjaro-tools/pkg/stable/x86_64/*.*.tar.* "$DIR/$GITLABBINARYCUSTOM5"
                        find "$DIR/$GITLABBINARYCUSTOM5" -type d -exec paccache -v -r -k 1 -c {} \; # clean cache
                    else
                        echo "Package did not build, removing ..."
                        rm -rf $folder/PKGBUILD
                    fi
                else
                    if [ "$var" == "0" ]; then
                        if time makepkg $MARG1 $MARG2 $MARG3 $MARG4 $MARG5 $MARG6; then
                            mv *.*.tar.* "$DIR/$GITLABBINARYCUSTOM5"
                            find "$DIR/$GITLABBINARYCUSTOM5" -type d -exec paccache -v -r -k 1 -c {} \; # clean cache
                        else
                            echo "Package did not build, removing ..."
                            rm -rf PKGBUILD
                        fi
                    else
                        if [ "$var" == "2" ]; then
                            if time makepkg -srci; then
                                mv *.*.tar.* "$DIR/$GITLABBINARYCUSTOM5"
                                find "$DIR/$GITLABBINARYCUSTOM5" -type d -exec paccache -v -r -k 1 -c {} \; # clean cache
                            else
                                echo "Package did not build, removing ..."
                                rm -rf PKGBUILD
                            fi
                        else
                            if [ "$var" == "3" ]; then
                                ls
                                folder="$(printf '%q\n' "${PWD##*/}")"
                                cd ..
                                if buildpkg $ARG1 $ARG2 $ARG3 $ARG4 $ARG5 $ARG6 $folder; then
                                    mv /var/cache/manjaro-tools/pkg/$ARG2/$ARG5/*.*.tar.* "$DIR/$GITLABBINARYCUSTOM5"
                                    find "$DIR/$GITLABBINARYCUSTOM5" -type d -exec paccache -v -r -k 1 -c {} \; # clean cache
                                else
                                    echo "Package did not build, removing ..."
                                    rm -rf $folder/PKGBUILD
                                fi
                            fi
                        fi
                    fi
                fi
            fi
        else
            echo "file does not exist local, downloading ..."
            mkdir -p "$DIR/packages/$p" && cd "$DIR/packages/$p"
            git clone "$GITHUBCLONEURL""$p".git
            folder="$(ls)"
            echo "$folder"
            mv $folder original
            cd original
            ls
            mv * .* "$DIR/packages/$p"
            cd "$DIR/packages/$p"
            rm -rf original
            mkdir -p "$DIR/$GITLABBINARYCUSTOM5"
            if [ "$var" == "1" ]; then
                updpkgsums
                if cd .. && buildpkg -c -p $folder; then
                    mv /var/cache/manjaro-tools/pkg/stable/x86_64/*.*.tar.* "$DIR/$GITLABBINARYCUSTOM5"
                else
                    echo "Package did not build, removing ..."
                    rm -rf $folder/PKGBUILD
                fi
            else
                if [ "$var" == "0" ]; then
                    updpkgsums
                    if time makepkg $MARG1 $MARG2 $MARG3 $MARG4 $MARG5 $MARG6; then
                        mv *.*.tar.* "$DIR/$GITLABBINARYCUSTOM5"
                    else
                        echo "Package did not build, removing ..."
                        rm -rf PKGBUILD
                    fi
                else
                    if [ "$var" == "2" ]; then
                        updpkgsums
                        if time makepkg -srci; then
                            mv *.*.tar.* "$DIR/$GITLABBINARYCUSTOM5"
                        else
                            echo "Package did not build, removing ..."
                            rm -rf PKGBUILD
                        fi
                    else
                        if [ "$var" == "3" ]; then
                            updpkgsums
                            if cd .. && buildpkg $ARG1 $ARG2 $ARG3 $ARG4 $ARG5 $ARG6 $folder; then
                                mv /var/cache/manjaro-tools/pkg/$ARG2/$ARG5/*.*.tar.* "$DIR/$GITLABBINARYCUSTOM5"
                            else
                                echo "Package did not build, removing ..."
                                rm -rf $folder/PKGBUILD
                            fi
                        fi
                    fi
                fi
            fi
        fi
    done <$GITLABSOURCECUSTOM5 #< $GITHUBSOURCE1
}
#
# Run the script once
function manualsync() {
    time {
        servercheck
        clear
        
        if [ "$SETGITHUBREPO" == "1" ]; then
            githubversion
            echo ""
            echo -e "$GITHUBMSG"
            # Local pacman repository update - rename repo to your preference
            if [ "$REPOADD" == "1" ]; then
                repo-add $HOME/autogit/$GITHUBBINARY/$GITHUBBINARY.db.tar.gz $HOME/autogit/$GITHUBBINARY/*.pkg.* &>/dev/null
            fi
        fi
        if [ "$SETCUSTGITHUBREPO" == "1" ]; then
            githubversioncustom
            echo ""
            echo -e "$GITHUBMSGCUST"
            # Local pacman repository update - rename repo to your preference
            if [ "$REPOADD" == "1" ]; then
                repo-add $HOME/autogit/$GITHUBBINARYCUSTOM/$GITHUBBINARYCUSTOM.db.tar.gz $HOME/autogit/$GITHUBBINARYCUSTOM/*.pkg.* &>/dev/null
            fi
        fi
        if [ "$SETGITLABREPO" == "1" ]; then
            gitlabversion
            echo ""
            echo -e "$GITLABMSG"
            # Local pacman repository update - rename repo to your preference
            if [ "$REPOADD" == "1" ]; then
                repo-add $HOME/autogit/$GITLABBINARY/$GITLABBINARY.db.tar.gz $HOME/autogit/$GITLABBINARY/*.pkg.* &>/dev/null
            fi
        fi
        if [ "$SETGITLABREPOCUSTOM" == "1" ]; then
            gitlabversioncustom
            echo ""
            echo -e "$GITLABMSGCUST"
            # Local pacman repository update - rename repo to your preference
            if [ "$REPOADD" == "1" ]; then
                repo-add $HOME/autogit/$GITLABBINARYCUSTOM/$GITLABBINARYCUSTOM.db.tar.gz $HOME/autogit/$GITLABBINARYCUSTOM/*.pkg.* &>/dev/null
            fi
        fi
        if [ "$SETGITLABREPOCUSTOM2" == "1" ]; then
            gitlabversioncustom2
            echo ""
            echo -e "$GITLABMSGCUST2"
            # Local pacman repository update - rename repo to your preference
            if [ "$REPOADD" == "1" ]; then
                repo-add $HOME/autogit/$GITLABBINARYCUSTOM2/$GITLABBINARYCUSTOM2.db.tar.gz $HOME/autogit/$GITLABBINARYCUSTOM2/*.pkg.* &>/dev/null
            fi
        fi
        if [ "$SETGITLABREPOCUSTOM3" == "1" ]; then
            gitlabversioncustom3
            echo ""
            echo -e "$GITLABMSGCUST3"
            # Local pacman repository update - rename repo to your preference
            if [ "$REPOADD" == "1" ]; then
                repo-add $HOME/autogit/$GITLABBINARYCUSTOM3/$GITLABBINARYCUSTOM3.db.tar.gz $HOME/autogit/$GITLABBINARYCUSTOM3/*.pkg.* &>/dev/null
            fi
        fi
        if [ "$SETGITLABREPOCUSTOM4" == "1" ]; then
            gitlabversioncustom4
            echo ""
            echo -e "$GITLABMSGCUST4"
            # Local pacman repository update - rename repo to your preference
            if [ "$REPOADD" == "1" ]; then
                repo-add $HOME/autogit/$GITLABBINARYCUSTOM4/$GITLABBINARYCUSTOM4.db.tar.gz $HOME/autogit/$GITLABBINARYCUSTOM4/*.pkg.* &>/dev/null
            fi
        fi
        if [ "$SETGITLABREPOCUSTOM5" == "1" ]; then
            gitlabversioncustom5
            echo ""
            echo -e "$GITLABMSGCUST5"
            # Local pacman repository update - rename repo to your preference
            if [ "$REPOADD" == "1" ]; then
                repo-add $HOME/autogit/$GITLABBINARYCUSTOM5/$GITLABBINARYCUSTOM5.db.tar.gz $HOME/autogit/$GITLABBINARYCUSTOM5/*.pkg.* &>/dev/null
            fi
        fi
        # Local pacman repository update - rename repo to your preference
        #repo-add $HOME/autogit/$GITHUBBINARY/repo.db.tar.gz $HOME/autogit/$GITHUBBINARY/*.pkg.* &>/dev/null
        # end
        echo ""
        echo -e "\e[1m Time Passed: \e[0m"
    }
}
#
# Run the script in a loop
function main() {
    while true; do
        
        servercheck
        clear
        
        time {
            #githubversion
            if [ "$SETGITHUBREPO" == "1" ]; then
                githubversion
                echo ""
                echo -e "$GITHUBMSG"
                # Local pacman repository update - rename repo to your preference
                if [ "$REPOADD" == "1" ]; then
                    repo-add $HOME/autogit/$GITHUBBINARY/$GITHUBBINARY.db.tar.gz $HOME/autogit/$GITHUBBINARY/*.pkg.* &>/dev/null
                fi
            fi
            if [ "$SETCUSTGITHUBREPO" == "1" ]; then
                githubversioncustom
                echo ""
                echo -e "$GITHUBMSGCUST"
                # Local pacman repository update - rename repo to your preference
                if [ "$REPOADD" == "1" ]; then
                    repo-add $HOME/autogit/$GITHUBBINARYCUSTOM/$GITHUBBINARYCUSTOM.db.tar.gz $HOME/autogit/$GITHUBBINARYCUSTOM/*.pkg.* &>/dev/null
                fi
            fi
            if [ "$SETGITLABREPO" == "1" ]; then
                gitlabversion
                echo ""
                echo -e "$GITLABMSG"
                # Local pacman repository update - rename repo to your preference
                if [ "$REPOADD" == "1" ]; then
                    repo-add $HOME/autogit/$GITLABBINARY/$GITLABBINARY.db.tar.gz $HOME/autogit/$GITLABBINARY/*.pkg.* &>/dev/null
                fi
            fi
            if [ "$SETGITLABREPOCUSTOM" == "1" ]; then
                gitlabversioncustom
                echo ""
                echo -e "$GITLABMSGCUST"
                # Local pacman repository update - rename repo to your preference
                if [ "$REPOADD" == "1" ]; then
                    repo-add $HOME/autogit/$GITLABBINARYCUSTOM/$GITLABBINARYCUSTOM.db.tar.gz $HOME/autogit/$GITLABBINARYCUSTOM/*.pkg.* &>/dev/null
                fi
            fi
            if [ "$SETGITLABREPOCUSTOM2" == "1" ]; then
                gitlabversioncustom2
                echo ""
                echo -e "$GITLABMSGCUST2"
                # Local pacman repository update - rename repo to your preference
                if [ "$REPOADD" == "1" ]; then
                    repo-add $HOME/autogit/$GITLABBINARYCUSTOM2/$GITLABBINARYCUSTOM2.db.tar.gz $HOME/autogit/$GITLABBINARYCUSTOM2/*.pkg.* &>/dev/null
                fi
            fi
            if [ "$SETGITLABREPOCUSTOM3" == "1" ]; then
                gitlabversioncustom3
                echo ""
                echo -e "$GITLABMSGCUST3"
                # Local pacman repository update - rename repo to your preference
                if [ "$REPOADD" == "1" ]; then
                    repo-add $HOME/autogit/$GITLABBINARYCUSTOM3/$GITLABBINARYCUSTOM3.db.tar.gz $HOME/autogit/$GITLABBINARYCUSTOM3/*.pkg.* &>/dev/null
                fi
            fi
            if [ "$SETGITLABREPOCUSTOM4" == "1" ]; then
                gitlabversioncustom4
                echo ""
                echo -e "$GITLABMSGCUST4"
                # Local pacman repository update - rename repo to your preference
                if [ "$REPOADD" == "1" ]; then
                    repo-add $HOME/autogit/$GITLABBINARYCUSTOM4/$GITLABBINARYCUSTOM4.db.tar.gz $HOME/autogit/$GITLABBINARYCUSTOM4/*.pkg.* &>/dev/null
                fi
            fi
            if [ "$SETGITLABREPOCUSTOM5" == "1" ]; then
                gitlabversioncustom5
                echo ""
                echo -e "$GITLABMSGCUST5"
                # Local pacman repository update - rename repo to your preference
                if [ "$REPOADD" == "1" ]; then
                    repo-add $HOME/autogit/$GITLABBINARYCUSTOM5/$GITLABBINARYCUSTOM5.db.tar.gz $HOME/autogit/$GITLABBINARYCUSTOM5/*.pkg.* &>/dev/null
                fi
            fi
            # Add repo and do a local pacman repository update after each update - rename repo to your preference
            #repo-add $HOME/autogit/binary/repo.db.tar.gz $HOME/autogit/binary/*.pkg.* &>/dev/null
            # end
            echo ""
            echo -e "\e[1m Time Passed: \e[0m"
        }
        echo ""
        echo -e "\e[1mPress \e[7mCtrl+C\e[0m \e[1mto stop autosync\e[0m"
        countdown() {
            secs=$timer
            shift
            while [ $secs -gt 0 ]; do
                printf "\r\033[KWaiting %.d seconds for next sync ..." $((secs--))
                sleep 1
            done
            echo
        }
        countdown
        sleep 1 && main
        
        # wait for input, e.g. by pressing ENTER:
        read -r
        
    done
    # close while-loop
}
#
# Start script
function modecheck() {
    if [ "$mode" == "1" ]; then
        main
    else
        if [ "$mode" == "2" ]; then
            manualsync
        fi
    fi
    if [ "$newconfig" == "1" ]; then
        echo ""
        echo -e " \e[1mLocal config generated \e[7m$HOME/autogit\e[0m"
        echo -e " \e[1mplease configure \e[7mautogit.conf\e[0m \e[1mfor usage.\e[0m"
    fi
}
modecheck
