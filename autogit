#!/bin/bash
#
# Set autogit directory
DIR=$HOME/autogit
#
# Check if local config exists
if [ -e "$DIR" ]; then
    #echo "local config found"
    echo &>/dev/null
else
    mkdir -p $DIR
    cp -r /usr/share/autogit $HOME
    newconfig=1
fi
#
# Load Config
configdir=$DIR
. $configdir/autogit.conf
#
# Messages
GITHUBMSG="\e[1mGithub repo updated - \e[7m$GITHUBBINARY\e[0m\e[0m"
GITHUBMSGCUST="\e[1mGithub repo updated - \e[7m$GITHUBBINARYCUSTOM\e[0m\e[0m"
GITHUBMSGCUST2="\e[1mGithub repo updated - \e[7m$GITHUBBINARYCUSTOM2\e[0m\e[0m"
GITHUBMSGCUST3="\e[1mGithub repo updated - \e[7m$GITHUBBINARYCUSTOM3\e[0m\e[0m"
GITHUBMSGCUST4="\e[1mGithub repo updated - \e[7m$GITHUBBINARYCUSTOM4\e[0m\e[0m"
GITHUBMSGCUST5="\e[1mGithub repo updated - \e[7m$GITHUBBINARYCUSTOM5\e[0m\e[0m"
GITLABMSG="\e[1mGitlab repo updated - \e[7m$GITLABBINARY\e[0m\e[0m"
GITLABMSGCUST="\e[1mGitlab repo updated - \e[7m$GITLABBINARYCUSTOM\e[0m\e[0m"
GITLABMSGCUST2="\e[1mGitlab repo updated - \e[7m$GITLABBINARYCUSTOM2\e[0m\e[0m"
GITLABMSGCUST3="\e[1mGitlab repo updated - \e[7m$GITLABBINARYCUSTOM3\e[0m\e[0m"
GITLABMSGCUST4="\e[1mGitlab repo updated - \e[7m$GITLABBINARYCUSTOM4\e[0m\e[0m"
GITLABMSGCUST5="\e[1mGitlab repo updated - \e[7m$GITLABBINARYCUSTOM5\e[0m\e[0m"
AURMSG="\e[1mAUR repo updated - \e[7m$AURBINARY\e[0m\e[0m"
FAILEDBUILDMSG="\e[31mPackage build failed, removing ...\e[0m"
#
# Pingtest
function pingtest() {
    if ping -c$count -W1 $Server &>/dev/null; then
        #echo "$Server is up!"
        echo &>/dev/null
    else
        echo "$Server no connection ..retrying!"
        if ping -c$count -W1 $Server &>/dev/null; then
            #echo "$Server is up!"
            echo &>/dev/null
        else
            echo "$Server no connection ..retrying!"
            if ping -c$count -W1 $Server &>/dev/null; then
                #echo "$Server is up!"
                echo &>/dev/null
            else
                echo "$Server no connection ..exit!"
                exit
            fi
        fi
    fi
}
# Check if server is online
function servercheck() {
    if [ -z ${Server1+x} ]; then
        #echo "var is unset"
        echo &>/dev/null
    else
        Server=$Server1
        pingtest
    fi

    if [ -z ${Server2+x} ]; then
        #echo "var is unset"
        echo &>/dev/null
    else
        Server=$Server2
        pingtest
    fi

    if [ -z ${Server3+x} ]; then
        #echo "var is unset"
        echo &>/dev/null
    else
        Server=$Server3
        pingtest
    fi
}
#
# Universal Functions
# Main functionality
function maincheck() {
    if [ -e "$DIR/packages/$GITDIR/$p" ]; then # If file exists
        cd "$DIR/packages/$GITDIR/$p"          # go to current package directory to compare it
        localfile=$(cat $(pwd)/PKGBUILD | grep 'pkgver=' | cut -c 8-)
        localfilepkgrel=$(cat $(pwd)/PKGBUILD | grep 'pkgrel=' | cut -c 8-)
        GETPKGVER=$(curl --silent "$GITHUBURL" | grep 'pkgver=' | cut -c 8-)
        GETPKGREL=$(curl --silent "$GITHUBURL" | grep 'pkgrel=' | cut -c 8-)

        echo -e "\e[1m⚿ local  version: $localfile-$localfilepkgrel\e[0m"
        echo -e "\e[1m⚿ online version: $GETPKGVER-$GETPKGREL\e[0m"

        if [ "$GETPKGVER" == "$localfile" ] && [ "$GETPKGREL" == "$localfilepkgrel" ]; then
            echo -e "\e[2m🗹 Up-to-Date\e[0m"
        else
            echo -e "\e[7mOut-of-Date! Updating ...\e[0m"
            git fetch origin &>/dev/null
            git checkout origin/$BRANCH &>/dev/null
            git reset --hard origin/$BRANCH # reset files to how they were before
            git clean -f -d         # clear any other changes you've done
            if [ "$var" == "1" ]; then
                ls
                folder="$(printf '%q\n' "${PWD##*/}")"
                cd ..
                if buildpkg -c -a multilib -p $folder; then
                    mv /var/cache/manjaro-tools/pkg/stable/x86_64/*.*.tar.* "$DIR/$GITHUBBINARY" &>/dev/null
                    find "$DIR/$GITHUBBINARY" -type d -exec paccache -v -r -k 1 -c {} \; # clean cache
                    setrepoadd=1
                else
                    echo -e "$FAILEDBUILDMSG"
                    rm -rf $folder/PKGBUILD
                    failedbuild=1
                fi
            else
                if [ "$var" == "0" ]; then
                    if time makepkg $MARG1 $MARG2 $MARG3 $MARG4 $MARG5 $MARG6; then
                        mv *.*.tar.* "$DIR/$GITHUBBINARY" &>/dev/null
                        find "$DIR/$GITHUBBINARY" -type d -exec paccache -v -r -k 1 -c {} \; # clean cache
                        setrepoadd=1
                    else
                        echo -e "$FAILEDBUILDMSG"
                        rm -rf PKGBUILD
                        failedbuild=1
                    fi
                else
                    if [ "$var" == "2" ]; then
                        if time makepkg -srci --noconfirm; then
                            echo "installed ..."
                        else
                            echo -e "$FAILEDBUILDMSG"
                            rm -rf PKGBUILD
                            failedbuild=1
                        fi
                    else
                        if [ "$var" == "3" ]; then
                            ls
                            folder="$(printf '%q\n' "${PWD##*/}")"
                            cd ..
                            if buildpkg $ARG1 $ARG2 $ARG3 $ARG4 $ARG5 $ARG6 $folder; then
                                mv /var/cache/manjaro-tools/pkg/$ARG2/$ARG5/*.*.tar.* "$DIR/$GITHUBBINARY" &>/dev/null
                                find "$DIR/$GITHUBBINARY" -type d -exec paccache -v -r -k 1 -c {} \; # clean cache
                                setrepoadd=1
                            else
                                echo -e "$FAILEDBUILDMSG"
                                rm -rf $folder/PKGBUILD
                                failedbuild=1
                            fi
                        fi
                    fi
                fi
            fi
        fi
    else
        echo "Package does not exist local, downloading ..."
        mkdir -p "$DIR/packages/$GITDIR/$p" && cd "$DIR/packages/$GITDIR/$p"
        git clone --single-branch --branch "$BRANCH" "$GITHUBCLONEURL""$p".git
        folder="$(ls)"
        echo "$folder"
        mv $folder original &>/dev/null
        cd original
        ls
        mv * .* "$DIR/packages/$GITDIR/$p" &>/dev/null
        cd "$DIR/packages/$GITDIR/$p"
        rm -rf original
        mkdir -p "$DIR/$GITHUBBINARY"
        if [ "$var" == "1" ]; then
            if cd .. && buildpkg -c -p $folder; then
                mv /var/cache/manjaro-tools/pkg/stable/x86_64/*.*.tar.* "$DIR/$GITHUBBINARY" &>/dev/null
                find "$DIR/$GITHUBBINARY" -type d -exec paccache -v -r -k 1 -c {} \; # clean cache
                setrepoadd=1
            else
                echo -e "$FAILEDBUILDMSG"
                rm -rf $folder/PKGBUILD
                failedbuild=1
            fi
        else
            if [ "$var" == "0" ]; then
                if time makepkg $MARG1 $MARG2 $MARG3 $MARG4 $MARG5 $MARG6; then
                    mv *.*.tar.* "$DIR/$GITHUBBINARY" &>/dev/null
                    find "$DIR/$GITHUBBINARY" -type d -exec paccache -v -r -k 1 -c {} \; # clean cache
                    setrepoadd=1
                else
                    echo -e "$FAILEDBUILDMSG"
                    rm -rf PKGBUILD
                    failedbuild=1
                fi
            else
                if [ "$var" == "2" ]; then
                    if time makepkg -srci --noconfirm; then
                        echo "installed ..."
                    else
                        echo -e "$FAILEDBUILDMSG"
                        rm -rf PKGBUILD
                        failedbuild=1
                    fi
                else
                    if [ "$var" == "3" ]; then
                        if cd .. && buildpkg $ARG1 $ARG2 $ARG3 $ARG4 $ARG5 $ARG6 $folder; then
                            mv /var/cache/manjaro-tools/pkg/$ARG2/$ARG5/*.*.tar.* "$DIR/$GITHUBBINARY" &>/dev/null
                            find "$DIR/$GITHUBBINARY" -type d -exec paccache -v -r -k 1 -c {} \; # clean cache
                            setrepoadd=1
                        else
                            echo -e "$FAILEDBUILDMSG"
                            rm -rf $folder/PKGBUILD
                            failedbuild=1
                        fi
                    fi
                fi
            fi
        fi
    fi
}
#
# Update, install, build packages from Github repos with available PKGBUILD
function githubversion() {
    while IFS="" read -r p || [ -n "$p" ]; do
        echo ""
        cd "$DIR"
        printf '\e[1;36m%-6s\e[m%s\n' "𝌤 $p" # Print package list entry
        GITHUBCLONEURL=$GITHUBCLONEURLC
        GITHUBURL="$GITHUBURLC"$p"/"$BRANCH"/PKGBUILD"
        GITDIR=Github1
        maincheck
        if [ "$setrepoadd" == "1" ]; then
            setrepoaddgithub1=1
            setrepoadd=0
            printf '%s\n' "$p"-["$GITHUBBINARY"] | tee -a "$DIR/packages/instpkgs.txt" &>/dev/null  # Compiled packages
        fi
        printf '%s\n' "$p" | tee -a "$DIR/packages/pkgs.txt" &>/dev/null                            # Checked Packages
        if [ "$failedbuild" == "1" ]; then
            printf '%s\n' "$p"-["$GITHUBBINARY"] | tee -a "$DIR/packages/failed.txt" &>/dev/null    # Failed to build packages
            failedbuild=0
        fi
    done <$GITHUBSOURCE #< $GITHUBSOURCE1
}
#
# Additional Custom Github repo
# Update, install, build packages from Github repos with available PKGBUILD
function githubversioncustom() {
    while IFS="" read -r p || [ -n "$p" ]; do
        echo ""
        cd "$DIR"
        printf '\e[1;36m%-6s\e[m%s\n' "𝌤 $p" # Print package list entry
        GITHUBBINARY=$GITHUBBINARYCUSTOM
        BRANCH=$BRANCHCUSTOM
        GITHUBCLONEURL=$GITHUBCLONEURLCCUSTOM
        GITHUBURL="$GITHUBURLCCUSTOM"$p"/"$BRANCH"/PKGBUILD"
        GITDIR=Github2
        maincheck
        if [ "$setrepoadd" == "1" ]; then
            setrepoaddgithub2=1
            setrepoadd=0
            printf '%s\n' "$p"-["$GITHUBBINARY"] | tee -a "$DIR/packages/instpkgs.txt" &>/dev/null
        fi
        printf '%s\n' "$p" | tee -a "$DIR/packages/pkgs.txt" &>/dev/null
        if [ "$failedbuild" == "1" ]; then
            printf '%s\n' "$p"-["$GITHUBBINARY"] | tee -a "$DIR/packages/failed.txt" &>/dev/null    # Failed to build packages
            failedbuild=0
        fi
    done <$GITHUBSOURCECUSTOM #< $GITHUBSOURCE1
}
#
# Additional Custom Github repo
# Update, install, build packages from Github repos with available PKGBUILD
function githubversioncustom2() {
    while IFS="" read -r p || [ -n "$p" ]; do
        echo ""
        cd "$DIR"
        printf '\e[1;36m%-6s\e[m%s\n' "𝌤 $p" # Print package list entry
        GITHUBBINARY=$GITHUBBINARYCUSTOM2
        BRANCH=$BRANCHCUSTOM2
        GITHUBCLONEURL=$GITHUBCLONEURLCCUSTOM2
        GITHUBURL="$GITHUBURLCCUSTOM2"$p"/"$BRANCH"/PKGBUILD"
        GITDIR=Github3
        maincheck
        if [ "$setrepoadd" == "1" ]; then
            setrepoaddgithub3=1
            setrepoadd=0
            printf '%s\n' "$p"-["$GITHUBBINARY"] | tee -a "$DIR/packages/instpkgs.txt" &>/dev/null
        fi
        printf '%s\n' "$p" | tee -a "$DIR/packages/pkgs.txt" &>/dev/null
        if [ "$failedbuild" == "1" ]; then
            printf '%s\n' "$p"-["$GITHUBBINARY"] | tee -a "$DIR/packages/failed.txt" &>/dev/null    # Failed to build packages
            failedbuild=0
        fi
    done <$GITHUBSOURCECUSTOM2 #< $GITHUBSOURCE1
}
#
# Additional Custom Github repo
# Update, install, build packages from Github repos with available PKGBUILD
function githubversioncustom3() {
    while IFS="" read -r p || [ -n "$p" ]; do
        echo ""
        cd "$DIR"
        printf '\e[1;36m%-6s\e[m%s\n' "𝌤 $p" # Print package list entry
        GITHUBBINARY=$GITHUBBINARYCUSTOM3
        BRANCH=$BRANCHCUSTOM3
        GITHUBCLONEURL=$GITHUBCLONEURLCCUSTOM3
        GITHUBURL="$GITHUBURLCCUSTOM3"$p"/"$BRANCH"/PKGBUILD"
        GITDIR=Github4
        maincheck
        if [ "$setrepoadd" == "1" ]; then
            setrepoaddgithub4=1
            setrepoadd=0
            printf '%s\n' "$p"-["$GITHUBBINARY"] | tee -a "$DIR/packages/instpkgs.txt" &>/dev/null
        fi
        printf '%s\n' "$p" | tee -a "$DIR/packages/pkgs.txt" &>/dev/null
        if [ "$failedbuild" == "1" ]; then
            printf '%s\n' "$p"-["$GITHUBBINARY"] | tee -a "$DIR/packages/failed.txt" &>/dev/null    # Failed to build packages
            failedbuild=0
        fi
    done <$GITHUBSOURCECUSTOM3 #< $GITHUBSOURCE1
}
#
# Additional Custom Github repo
# Update, install, build packages from Github repos with available PKGBUILD
function githubversioncustom4() {
    while IFS="" read -r p || [ -n "$p" ]; do
        echo ""
        cd "$DIR"
        printf '\e[1;36m%-6s\e[m%s\n' "𝌤 $p" # Print package list entry
        GITHUBBINARY=$GITHUBBINARYCUSTOM4
        BRANCH=$BRANCHCUSTOM4
        GITHUBCLONEURL=$GITHUBCLONEURLCCUSTOM4
        GITHUBURL="$GITHUBURLCCUSTOM4"$p"/"$BRANCH"/PKGBUILD"
        GITDIR=Github5
        maincheck
        if [ "$setrepoadd" == "1" ]; then
            setrepoaddgithub5=1
            setrepoadd=0
            printf '%s\n' "$p"-["$GITHUBBINARY"] | tee -a "$DIR/packages/instpkgs.txt" &>/dev/null
        fi
        printf '%s\n' "$p" | tee -a "$DIR/packages/pkgs.txt" &>/dev/null
        if [ "$failedbuild" == "1" ]; then
            printf '%s\n' "$p"-["$GITHUBBINARY"] | tee -a "$DIR/packages/failed.txt" &>/dev/null    # Failed to build packages
            failedbuild=0
        fi
    done <$GITHUBSOURCECUSTOM4 #< $GITHUBSOURCE1
}
#
# Additional Custom Github repo
# Update, install, build packages from Github repos with available PKGBUILD
function githubversioncustom5() {
    while IFS="" read -r p || [ -n "$p" ]; do
        echo ""
        cd "$DIR"
        printf '\e[1;36m%-6s\e[m%s\n' "𝌤 $p" # Print package list entry
        GITHUBBINARY=$GITHUBBINARYCUSTOM5
        BRANCH=$BRANCHCUSTOM5
        GITHUBCLONEURL=$GITHUBCLONEURLCCUSTOM5
        GITHUBURL="$GITHUBURLCCUSTOM5"$p"/"$BRANCH"/PKGBUILD"
        GITDIR=Github6
        maincheck
        if [ "$setrepoadd" == "1" ]; then
            setrepoaddgithub6=1
            setrepoadd=0
            printf '%s\n' "$p"-["$GITHUBBINARY"] | tee -a "$DIR/packages/instpkgs.txt" &>/dev/null
        fi
        printf '%s\n' "$p" | tee -a "$DIR/packages/pkgs.txt" &>/dev/null
        if [ "$failedbuild" == "1" ]; then
            printf '%s\n' "$p"-["$GITHUBBINARY"] | tee -a "$DIR/packages/failed.txt" &>/dev/null    # Failed to build packages
            failedbuild=0
        fi
    done <$GITHUBSOURCECUSTOM5 #< $GITHUBSOURCE1
}
#
# Additional Gitlab repo
# Update, install, build packages from Gitlab repos with available PKGBUILD
function gitlabversion() {
    while IFS="" read -r p || [ -n "$p" ]; do
        echo ""
        cd "$DIR"
        printf '\e[1;36m%-6s\e[m%s\n' "𝌤 $p" # Print package list entry
        GITHUBBINARY=$GITLABBINARY
        BRANCH=$BRANCHGITLAB
        GITHUBCLONEURL=$GITLABCLONEURL
        GITHUBURL="$GITLABURLC"$p"/-/raw/"$BRANCH"/PKGBUILD"
        GITDIR=Gitlab1
        maincheck
        if [ "$setrepoadd" == "1" ]; then
            setrepoaddgitlab1=1
            setrepoadd=0
            printf '%s\n' "$p"-["$GITHUBBINARY"] | tee -a "$DIR/packages/instpkgs.txt" &>/dev/null
        fi
        printf '%s\n' "$p" | tee -a "$DIR/packages/pkgs.txt" &>/dev/null
        if [ "$failedbuild" == "1" ]; then
            printf '%s\n' "$p"-["$GITHUBBINARY"] | tee -a "$DIR/packages/failed.txt" &>/dev/null    # Failed to build packages
            failedbuild=0
        fi
    done <$GITLABSOURCE #< $GITHUBSOURCE1
}
#
# Additional Custom Gitlab repo
# Update, install, build packages from Gitlab repos with available PKGBUILD
function gitlabversioncustom() {
    while IFS="" read -r p || [ -n "$p" ]; do
        echo ""
        cd "$DIR"
        printf '\e[1;36m%-6s\e[m%s\n' "𝌤 $p" # Print package list entry
        GITHUBBINARY=$GITLABBINARYCUSTOM
        BRANCH=$BRANCHGITLABCUSTOM
        GITHUBCLONEURL=$GITLABCLONEURLCUSTOM
        GITHUBURL="$GITLABURLCCUSTOM"$p"/-/raw/"$BRANCH"/PKGBUILD"
        GITDIR=Gitlab2
        maincheck
        if [ "$setrepoadd" == "1" ]; then
            setrepoaddgitlab2=1
            setrepoadd=0
            printf '%s\n' "$p"-["$GITHUBBINARY"] | tee -a "$DIR/packages/instpkgs.txt" &>/dev/null
        fi
        printf '%s\n' "$p" | tee -a "$DIR/packages/pkgs.txt" &>/dev/null
        if [ "$failedbuild" == "1" ]; then
            printf '%s\n' "$p"-["$GITHUBBINARY"] | tee -a "$DIR/packages/failed.txt" &>/dev/null    # Failed to build packages
            failedbuild=0
        fi
    done <$GITLABSOURCECUSTOM #< $GITHUBSOURCE1
}
#
# Additional Custom Gitlab repo extra 2
# Update, install, build packages from Gitlab repos with available PKGBUILD
function gitlabversioncustom2() {
    while IFS="" read -r p || [ -n "$p" ]; do
        echo ""
        cd "$DIR"
        printf '\e[1;36m%-6s\e[m%s\n' "𝌤 $p" # Print package list entry
        GITHUBBINARY=$GITLABBINARYCUSTOM2
        BRANCH=$BRANCHGITLABCUSTOM2
        GITHUBCLONEURL=$GITLABCLONEURLCUSTOM2
        GITHUBURL="$GITLABURLCCUSTOM2"$p"/-/raw/"$BRANCH"/PKGBUILD"
        GITDIR=Gitlab3
        maincheck
        if [ "$setrepoadd" == "1" ]; then
            setrepoaddgitlab3=1
            setrepoadd=0
            printf '%s\n' "$p"-["$GITHUBBINARY"] | tee -a "$DIR/packages/instpkgs.txt" &>/dev/null
        fi
        printf '%s\n' "$p" | tee -a "$DIR/packages/pkgs.txt" &>/dev/null
        if [ "$failedbuild" == "1" ]; then
            printf '%s\n' "$p"-["$GITHUBBINARY"] | tee -a "$DIR/packages/failed.txt" &>/dev/null    # Failed to build packages
            failedbuild=0
        fi
    done <$GITLABSOURCECUSTOM2 #< $GITHUBSOURCE1
}
#
# Additional Custom Gitlab repo extra 3
# Update, install, build packages from Gitlab repos with available PKGBUILD
function gitlabversioncustom3() {
    while IFS="" read -r p || [ -n "$p" ]; do
        echo ""
        cd "$DIR"
        printf '\e[1;36m%-6s\e[m%s\n' "𝌤 $p" # Print package list entry
        GITHUBBINARY=$GITLABBINARYCUSTOM3
        BRANCH=$BRANCHGITLABCUSTOM3
        GITHUBCLONEURL=$GITLABCLONEURLCUSTOM3
        GITHUBURL="$GITLABURLCCUSTOM3"$p"/-/raw/"$BRANCH"/PKGBUILD"
        GITDIR=Gitlab4
        maincheck
        if [ "$setrepoadd" == "1" ]; then
            setrepoaddgitlab4=1
            setrepoadd=0
            printf '%s\n' "$p"-["$GITHUBBINARY"] | tee -a "$DIR/packages/instpkgs.txt" &>/dev/null
        fi
        printf '%s\n' "$p" | tee -a "$DIR/packages/pkgs.txt" &>/dev/null
        if [ "$failedbuild" == "1" ]; then
            printf '%s\n' "$p"-["$GITHUBBINARY"] | tee -a "$DIR/packages/failed.txt" &>/dev/null    # Failed to build packages
            failedbuild=0
        fi
    done <$GITLABSOURCECUSTOM3 #< $GITHUBSOURCE1
}
#
#
# Additional Custom Gitlab repo extra 3
# Update, install, build packages from Gitlab repos with available PKGBUILD
function gitlabversioncustom4() {
    while IFS="" read -r p || [ -n "$p" ]; do
        echo ""
        cd "$DIR"
        printf '\e[1;36m%-6s\e[m%s\n' "𝌤 $p" # Print package list entry
        GITHUBBINARY=$GITLABBINARYCUSTOM4
        BRANCH=$BRANCHGITLABCUSTOM4
        GITHUBCLONEURL=$GITLABCLONEURLCUSTOM4
        GITHUBURL="$GITLABURLCCUSTOM4"$p"/-/raw/"$BRANCH"/PKGBUILD"
        GITDIR=Gitlab5
        maincheck
        if [ "$setrepoadd" == "1" ]; then
            setrepoaddgitlab5=1
            setrepoadd=0
            printf '%s\n' "$p"-["$GITHUBBINARY"] | tee -a "$DIR/packages/instpkgs.txt" &>/dev/null
        fi
        printf '%s\n' "$p" | tee -a "$DIR/packages/pkgs.txt" &>/dev/null
        if [ "$failedbuild" == "1" ]; then
            printf '%s\n' "$p"-["$GITHUBBINARY"] | tee -a "$DIR/packages/failed.txt" &>/dev/null    # Failed to build packages
            failedbuild=0
        fi
    done <$GITLABSOURCECUSTOM4 #< $GITHUBSOURCE1
}
#
#
# Additional Custom Gitlab repo extra 3
# Update, install, build packages from Gitlab repos with available PKGBUILD
function gitlabversioncustom5() {
    while IFS="" read -r p || [ -n "$p" ]; do
        echo ""
        cd "$DIR"
        printf '\e[1;36m%-6s\e[m%s\n' "𝌤 $p" # Print package list entry
        GITHUBBINARY=$GITLABBINARYCUSTOM5
        BRANCH=$BRANCHGITLABCUSTOM5
        GITHUBCLONEURL=$GITLABCLONEURLCUSTOM5
        GITHUBURL="$GITLABURLCCUSTOM5"$p"/-/raw/"$BRANCH"/PKGBUILD"
        GITDIR=Gitlab6
        maincheck
        if [ "$setrepoadd" == "1" ]; then
            setrepoaddgitlab6=1
            setrepoadd=0
            printf '%s\n' "$p"-["$GITHUBBINARY"] | tee -a "$DIR/packages/instpkgs.txt" &>/dev/null
        fi
        printf '%s\n' "$p" | tee -a "$DIR/packages/pkgs.txt" &>/dev/null
        if [ "$failedbuild" == "1" ]; then
            printf '%s\n' "$p"-["$GITHUBBINARY"] | tee -a "$DIR/packages/failed.txt" &>/dev/null    # Failed to build packages
            failedbuild=0
        fi
    done <$GITLABSOURCECUSTOM5 #< $GITHUBSOURCE1
}
#
# Additional AUR repo
# Update, install, build packages from AUR
function aur() {
    while IFS="" read -r p || [ -n "$p" ]; do
        echo ""
        cd "$DIR"
        printf '\e[1;36m%-6s\e[m%s\n' "𝌤 $p" # Print package list entry
        GITHUBBINARY=$AURBINARY
        BRANCH=master
        GITHUBURL="$AURCLONEURL""$p"
        GITHUBCLONEURL="$AURURL"
        GITDIR=AUR
        maincheck
        if [ "$setrepoadd" == "1" ]; then
            setrepoaddaur=1
            setrepoadd=0
            printf '%s\n' "$p"-["$GITHUBBINARY"] | tee -a "$DIR/packages/instpkgs.txt" &>/dev/null
        fi
        printf '%s\n' "$p" | tee -a "$DIR/packages/pkgs.txt" &>/dev/null
        if [ "$failedbuild" == "1" ]; then
            printf '%s\n' "$p"-["$GITHUBBINARY"] | tee -a "$DIR/packages/failed.txt" &>/dev/null    # Failed to build packages
            failedbuild=0
        fi
    done <$AURSOURCE #< $GITHUBSOURCE1
}
#
# Run the script once
function manualsync() {

    clear

    time {
        servercheck
        if [ "$SETGITHUBREPO" == "1" ]; then
            githubversion
            echo ""
            echo -e "$GITHUBMSG"
            # Local pacman repository update - rename repo to your preference
            if [ "$REPOADD" == "1" ] && [ "$setrepoaddgithub1" == "1" ]; then
                echo -e "\e[1mUpdating Database ...\e[0m"
                repo-add $DIR/$GITHUBBINARY/$GITHUBBINARY.db.tar.gz $DIR/$GITHUBBINARY/*.pkg.* &>/dev/null
                setrepoaddgithub1=0
            fi
        fi
        if [ "$SETCUSTGITHUBREPO" == "1" ]; then
            githubversioncustom
            echo ""
            echo -e "$GITHUBMSGCUST"
            # Local pacman repository update - rename repo to your preference
            if [ "$REPOADD" == "1" ] && [ "$setrepoaddgithub2" == "1" ]; then
                echo -e "\e[1mUpdating Database ...\e[0m"
                repo-add $DIR/$GITHUBBINARYCUSTOM/$GITHUBBINARYCUSTOM.db.tar.gz $DIR/$GITHUBBINARYCUSTOM/*.pkg.* &>/dev/null
                setrepoaddgithub2=0
            fi
        fi
        if [ "$SETCUSTGITHUBREPO2" == "1" ]; then
            githubversioncustom2
            echo ""
            echo -e "$GITHUBMSGCUST2"
            # Local pacman repository update - rename repo to your preference
            if [ "$REPOADD" == "1" ] && [ "$setrepoaddgithub3" == "1" ]; then
                echo -e "\e[1mUpdating Database ...\e[0m"
                repo-add $DIR/$GITHUBBINARYCUSTOM2/$GITHUBBINARYCUSTOM2.db.tar.gz $DIR/$GITHUBBINARYCUSTOM2/*.pkg.* &>/dev/null
                setrepoaddgithub3=0
            fi
        fi
        if [ "$SETCUSTGITHUBREPO3" == "1" ]; then
            githubversioncustom3
            echo ""
            echo -e "$GITHUBMSGCUST3"
            # Local pacman repository update - rename repo to your preference
            if [ "$REPOADD" == "1" ] && [ "$setrepoaddgithub4" == "1" ]; then
                echo -e "\e[1mUpdating Database ...\e[0m"
                repo-add $DIR/$GITHUBBINARYCUSTOM3/$GITHUBBINARYCUSTOM3.db.tar.gz $DIR/$GITHUBBINARYCUSTOM3/*.pkg.* &>/dev/null
                setrepoaddgithub4=0
            fi
        fi
        if [ "$SETCUSTGITHUBREPO4" == "1" ]; then
            githubversioncustom4
            echo ""
            echo -e "$GITHUBMSGCUST4"
            # Local pacman repository update - rename repo to your preference
            if [ "$REPOADD" == "1" ] && [ "$setrepoaddgithub5" == "1" ]; then
                echo -e "\e[1mUpdating Database ...\e[0m"
                repo-add $DIR/$GITHUBBINARYCUSTOM4/$GITHUBBINARYCUSTOM4.db.tar.gz $DIR/$GITHUBBINARYCUSTOM4/*.pkg.* &>/dev/null
                setrepoaddgithub5=0
            fi
        fi
        if [ "$SETCUSTGITHUBREPO5" == "1" ]; then
            githubversioncustom5
            echo ""
            echo -e "$GITHUBMSGCUST5"
            # Local pacman repository update - rename repo to your preference
            if [ "$REPOADD" == "1" ] && [ "$setrepoaddgithub6" == "1" ]; then
                echo -e "\e[1mUpdating Database ...\e[0m"
                repo-add $DIR/$GITHUBBINARYCUSTOM5/$GITHUBBINARYCUSTOM5.db.tar.gz $DIR/$GITHUBBINARYCUSTOM5/*.pkg.* &>/dev/null
                setrepoaddgithub6=0
            fi
        fi
        if [ "$SETGITLABREPO" == "1" ]; then
            gitlabversion
            echo ""
            echo -e "$GITLABMSG"
            # Local pacman repository update - rename repo to your preference
            if [ "$REPOADD" == "1" ] && [ "$setrepoaddgitlab1" == "1" ]; then
                echo -e "\e[1mUpdating Database ...\e[0m"
                repo-add $DIR/$GITLABBINARY/$GITLABBINARY.db.tar.gz $DIR/$GITLABBINARY/*.pkg.* &>/dev/null
                setrepoaddgitlab1=0
            fi
        fi
        if [ "$SETGITLABREPOCUSTOM" == "1" ]; then
            gitlabversioncustom
            echo ""
            echo -e "$GITLABMSGCUST"
            # Local pacman repository update - rename repo to your preference
            if [ "$REPOADD" == "1" ] && [ "$setrepoaddgitlab2" == "1" ]; then
                echo -e "\e[1mUpdating Database ...\e[0m"
                repo-add $DIR/$GITLABBINARYCUSTOM/$GITLABBINARYCUSTOM.db.tar.gz $DIR/$GITLABBINARYCUSTOM/*.pkg.* &>/dev/null
                setrepoaddgitlab2=0
            fi
        fi
        if [ "$SETGITLABREPOCUSTOM2" == "1" ]; then
            gitlabversioncustom2
            echo ""
            echo -e "$GITLABMSGCUST2"
            # Local pacman repository update - rename repo to your preference
            if [ "$REPOADD" == "1" ] && [ "$setrepoaddgitlab3" == "1" ]; then
                echo -e "\e[1mUpdating Database ...\e[0m"
                repo-add $DIR/$GITLABBINARYCUSTOM2/$GITLABBINARYCUSTOM2.db.tar.gz $DIR/$GITLABBINARYCUSTOM2/*.pkg.* &>/dev/null
                setrepoaddgitlab3=0
            fi
        fi
        if [ "$SETGITLABREPOCUSTOM3" == "1" ]; then
            gitlabversioncustom3
            echo ""
            echo -e "$GITLABMSGCUST3"
            # Local pacman repository update - rename repo to your preference
            if [ "$REPOADD" == "1" ] && [ "$setrepoaddgitlab4" == "1" ]; then
                echo -e "\e[1mUpdating Database ...\e[0m"
                repo-add $DIR/$GITLABBINARYCUSTOM3/$GITLABBINARYCUSTOM3.db.tar.gz $DIR/$GITLABBINARYCUSTOM3/*.pkg.* &>/dev/null
                setrepoaddgitlab4=0
            fi
        fi
        if [ "$SETGITLABREPOCUSTOM4" == "1" ]; then
            gitlabversioncustom4
            echo ""
            echo -e "$GITLABMSGCUST4"
            # Local pacman repository update - rename repo to your preference
            if [ "$REPOADD" == "1" ] && [ "$setrepoaddgitlab5" == "1" ]; then
                echo -e "\e[1mUpdating Database ...\e[0m"
                repo-add $DIR/$GITLABBINARYCUSTOM4/$GITLABBINARYCUSTOM4.db.tar.gz $DIR/$GITLABBINARYCUSTOM4/*.pkg.* &>/dev/null
                setrepoaddgitlab5=0
            fi
        fi
        if [ "$SETGITLABREPOCUSTOM5" == "1" ]; then
            gitlabversioncustom5
            echo ""
            echo -e "$GITLABMSGCUST5"
            # Local pacman repository update - rename repo to your preference
            if [ "$REPOADD" == "1" ] && [ "$setrepoaddgitlab6" == "1" ]; then
                echo -e "\e[1mUpdating Database ...\e[0m"
                repo-add $DIR/$GITLABBINARYCUSTOM5/$GITLABBINARYCUSTOM5.db.tar.gz $DIR/$GITLABBINARYCUSTOM5/*.pkg.* &>/dev/null
                setrepoaddgitlab6=0
            fi
        fi
        if [ "$AURREPO" == "1" ]; then
            aur
            echo ""
            echo -e "$AURMSG"
            # Local pacman repository update - rename repo to your preference
            if [ "$REPOADD" == "1" ] && [ "$setrepoaddaur" == "1" ]; then
                echo -e "\e[1mUpdating Database ...\e[0m"
                repo-add $DIR/$AURBINARY/$AURBINARY.db.tar.gz $DIR/$AURBINARY/*.pkg.* &>/dev/null
                setrepoaddaur=0
            fi
        fi
        if [ -e "$DIR/packages/pkgs.txt" ]; then
            echo ""
            checked=$(cat "$DIR/packages/pkgs.txt" | wc -l)
            echo -e "     \e[3m🗱  Checked Package(s): $checked\e[0m"
            rm -rf "$DIR/packages/pkgs.txt"
        fi
        if [ -e "$DIR/packages/instpkgs.txt" ]; then
            checked=$(cat "$DIR/packages/instpkgs.txt" | wc -l)
            echo -e "     \e[3m🗱  Compiled Package(s): $checked\e[0m"
            cat -b "$DIR/packages/instpkgs.txt"
            rm -rf "$DIR/packages/instpkgs.txt"
        fi
        if [ -e "$DIR/packages/failed.txt" ]; then
            checked=$(cat "$DIR/packages/failed.txt" | wc -l)
            echo -e "     \e[3m🗱  Failed to Build: $checked\e[0m"
            cat -b "$DIR/packages/failed.txt"
            rm -rf "$DIR/packages/failed.txt"
        fi
        echo ""
        echo -e "\e[1m Elapsed Time: \e[0m"
    }
}
#
# Run the script in a loop
function main() {
    while true; do

        clear

        time {
            servercheck
            if [ "$SETGITHUBREPO" == "1" ]; then
                githubversion
                echo ""
                echo -e "$GITHUBMSG"
                # Local pacman repository update - rename repo to your preference
                if [ "$REPOADD" == "1" ] && [ "$setrepoaddgithub1" == "1" ]; then
                    echo -e "\e[1mUpdating Database ...\e[0m"
                    repo-add $DIR/$GITHUBBINARY/$GITHUBBINARY.db.tar.gz $DIR/$GITHUBBINARY/*.pkg.* &>/dev/null
                    setrepoaddgithub1=0
                fi
            fi
            if [ "$SETCUSTGITHUBREPO" == "1" ]; then
                githubversioncustom
                echo ""
                echo -e "$GITHUBMSGCUST"
                # Local pacman repository update - rename repo to your preference
                if [ "$REPOADD" == "1" ] && [ "$setrepoaddgithub2" == "1" ]; then
                    echo -e "\e[1mUpdating Database ...\e[0m"
                    repo-add $DIR/$GITHUBBINARYCUSTOM/$GITHUBBINARYCUSTOM.db.tar.gz $DIR/$GITHUBBINARYCUSTOM/*.pkg.* &>/dev/null
                    setrepoaddgithub2=0
                fi
            fi
            if [ "$SETCUSTGITHUBREPO2" == "1" ]; then
                githubversioncustom2
                echo ""
                echo -e "$GITHUBMSGCUST2"
                # Local pacman repository update - rename repo to your preference
                if [ "$REPOADD" == "1" ] && [ "$setrepoaddgithub3" == "1" ]; then
                    echo -e "\e[1mUpdating Database ...\e[0m"
                    repo-add $DIR/$GITHUBBINARYCUSTOM2/$GITHUBBINARYCUSTOM2.db.tar.gz $DIR/$GITHUBBINARYCUSTOM2/*.pkg.* &>/dev/null
                    setrepoaddgithub3=0
                fi
            fi
            if [ "$SETCUSTGITHUBREPO3" == "1" ]; then
                githubversioncustom3
                echo ""
                echo -e "$GITHUBMSGCUST3"
                # Local pacman repository update - rename repo to your preference
                if [ "$REPOADD" == "1" ] && [ "$setrepoaddgithub4" == "1" ]; then
                    echo -e "\e[1mUpdating Database ...\e[0m"
                    repo-add $DIR/$GITHUBBINARYCUSTOM3/$GITHUBBINARYCUSTOM3.db.tar.gz $DIR/$GITHUBBINARYCUSTOM3/*.pkg.* &>/dev/null
                    setrepoaddgithub4=0
                fi
            fi
            if [ "$SETCUSTGITHUBREPO4" == "1" ]; then
                githubversioncustom4
                echo ""
                echo -e "$GITHUBMSGCUST4"
                # Local pacman repository update - rename repo to your preference
                if [ "$REPOADD" == "1" ] && [ "$setrepoaddgithub5" == "1" ]; then
                    echo -e "\e[1mUpdating Database ...\e[0m"
                    repo-add $DIR/$GITHUBBINARYCUSTOM4/$GITHUBBINARYCUSTOM4.db.tar.gz $DIR/$GITHUBBINARYCUSTOM4/*.pkg.* &>/dev/null
                    setrepoaddgithub5=0
                fi
            fi
            if [ "$SETCUSTGITHUBREPO5" == "1" ]; then
                githubversioncustom5
                echo ""
                echo -e "$GITHUBMSGCUST5"
                # Local pacman repository update - rename repo to your preference
                if [ "$REPOADD" == "1" ] && [ "$setrepoaddgithub6" == "1" ]; then
                    echo -e "\e[1mUpdating Database ...\e[0m"
                    repo-add $DIR/$GITHUBBINARYCUSTOM5/$GITHUBBINARYCUSTOM5.db.tar.gz $DIR/$GITHUBBINARYCUSTOM5/*.pkg.* &>/dev/null
                    setrepoaddgithub6=0
                fi
            fi
            if [ "$SETGITLABREPO" == "1" ]; then
                gitlabversion
                echo ""
                echo -e "$GITLABMSG"
                # Local pacman repository update - rename repo to your preference
                if [ "$REPOADD" == "1" ] && [ "$setrepoaddgitlab1" == "1" ]; then
                    echo -e "\e[1mUpdating Database ...\e[0m"
                    repo-add $DIR/$GITLABBINARY/$GITLABBINARY.db.tar.gz $DIR/$GITLABBINARY/*.pkg.* &>/dev/null
                    setrepoaddgitlab1=0
                fi
            fi
            if [ "$SETGITLABREPOCUSTOM" == "1" ]; then
                gitlabversioncustom
                echo ""
                echo -e "$GITLABMSGCUST"
                # Local pacman repository update - rename repo to your preference
                if [ "$REPOADD" == "1" ] && [ "$setrepoaddgitlab2" == "1" ]; then
                    echo -e "\e[1mUpdating Database ...\e[0m"
                    repo-add $DIR/$GITLABBINARYCUSTOM/$GITLABBINARYCUSTOM.db.tar.gz $DIR/$GITLABBINARYCUSTOM/*.pkg.* &>/dev/null
                    setrepoaddgitlab2=0
                fi
            fi
            if [ "$SETGITLABREPOCUSTOM2" == "1" ]; then
                gitlabversioncustom2
                echo ""
                echo -e "$GITLABMSGCUST2"
                # Local pacman repository update - rename repo to your preference
                if [ "$REPOADD" == "1" ] && [ "$setrepoaddgitlab3" == "1" ]; then
                    echo -e "\e[1mUpdating Database ...\e[0m"
                    repo-add $DIR/$GITLABBINARYCUSTOM2/$GITLABBINARYCUSTOM2.db.tar.gz $DIR/$GITLABBINARYCUSTOM2/*.pkg.* &>/dev/null
                    setrepoaddgitlab3=0
                fi
            fi
            if [ "$SETGITLABREPOCUSTOM3" == "1" ]; then
                gitlabversioncustom3
                echo ""
                echo -e "$GITLABMSGCUST3"
                # Local pacman repository update - rename repo to your preference
                if [ "$REPOADD" == "1" ] && [ "$setrepoaddgitlab4" == "1" ]; then
                    echo -e "\e[1mUpdating Database ...\e[0m"
                    repo-add $DIR/$GITLABBINARYCUSTOM3/$GITLABBINARYCUSTOM3.db.tar.gz $DIR/$GITLABBINARYCUSTOM3/*.pkg.* &>/dev/null
                    setrepoaddgitlab4=0
                fi
            fi
            if [ "$SETGITLABREPOCUSTOM4" == "1" ]; then
                gitlabversioncustom4
                echo ""
                echo -e "$GITLABMSGCUST4"
                # Local pacman repository update - rename repo to your preference
                if [ "$REPOADD" == "1" ] && [ "$setrepoaddgitlab5" == "1" ]; then
                    echo -e "\e[1mUpdating Database ...\e[0m"
                    repo-add $DIR/$GITLABBINARYCUSTOM4/$GITLABBINARYCUSTOM4.db.tar.gz $DIR/$GITLABBINARYCUSTOM4/*.pkg.* &>/dev/null
                    setrepoaddgitlab5=0
                fi
            fi
            if [ "$SETGITLABREPOCUSTOM5" == "1" ]; then
                gitlabversioncustom5
                echo ""
                echo -e "$GITLABMSGCUST5"
                # Local pacman repository update - rename repo to your preference
                if [ "$REPOADD" == "1" ] && [ "$setrepoaddgitlab6" == "1" ]; then
                    echo -e "\e[1mUpdating Database ...\e[0m"
                    repo-add $DIR/$GITLABBINARYCUSTOM5/$GITLABBINARYCUSTOM5.db.tar.gz $DIR/$GITLABBINARYCUSTOM5/*.pkg.* &>/dev/null
                    setrepoaddgitlab6=0
                fi
            fi
            if [ "$AURREPO" == "1" ]; then
                aur
                echo ""
                echo -e "$AURMSG"
                # Local pacman repository update - rename repo to your preference
                if [ "$REPOADD" == "1" ] && [ "$setrepoaddaur" == "1" ]; then
                    echo -e "\e[1mUpdating Database ...\e[0m"
                    repo-add $DIR/$AURBINARY/$AURBINARY.db.tar.gz $DIR/$AURBINARY/*.pkg.* &>/dev/null
                    setrepoaddaur=0
                fi
            fi
            if [ -e "$DIR/packages/pkgs.txt" ]; then
                echo ""
                checked=$(cat "$DIR/packages/pkgs.txt" | wc -l)
                echo -e "     \e[3m🗱  Checked Package(s): $checked\e[0m"
                rm -rf "$DIR/packages/pkgs.txt"
            fi
            if [ -e "$DIR/packages/instpkgs.txt" ]; then
                checked=$(cat "$DIR/packages/instpkgs.txt" | wc -l)
                echo -e "     \e[3m🗱  Compiled Package(s): $checked\e[0m"
                cat -b "$DIR/packages/instpkgs.txt"
                rm -rf "$DIR/packages/instpkgs.txt"
            fi
            if [ -e "$DIR/packages/failed.txt" ]; then
                checked=$(cat "$DIR/packages/failed.txt" | wc -l)
                echo -e "     \e[3m🗱  Failed to Build: $checked\e[0m"
                cat -b "$DIR/packages/failed.txt"
                rm -rf "$DIR/packages/failed.txt"
            fi
            echo ""
            echo -e "\e[1m Elapsed Time: \e[0m"
        }
        echo ""
        echo -e "\e[1mPress \e[7m[Ctrl]\e[0m+\e[1m\e[7m[C]\e[0m \e[1mto stop \e[3mautogit\e[0m"
        countdown() {
            secs=$timer
            shift
            while [ $secs -gt 0 ]; do
                printf "\r\033[KWaiting %.d seconds for next sync ..." $((secs--))
                sleep 1
            done
            echo
        }
        countdown
        sleep 1 && main

        # wait for input, e.g. by pressing ENTER:
        read -r

    done
    # close while-loop
}
#
# Start script
function modecheck() {
    if [ "$mode" == "1" ]; then
        main
    else
        if [ "$mode" == "2" ]; then
            manualsync
        fi
    fi
    if [ "$newconfig" == "1" ]; then
        echo ""
        echo -e " \e[1mLocal config generated @ \e[7m$DIR\e[0m"
        echo ""
        echo -e " \e[1mplease configure \e[7mautogit.conf\e[0m \e[1mfor usage.\e[0m"
    fi
}
modecheck
